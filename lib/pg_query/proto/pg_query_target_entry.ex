# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule PgQuery.TargetEntry do
  @moduledoc false
  if function_exported?(Protox, :check_generator_version, 1) do
    Protox.check_generator_version(1)
  else
    raise "This code was generated with protox 2 but the runtime is using an older version of protox."
  end

  @type t :: %__MODULE__{
          resjunk: boolean(),
          resorigcol: integer(),
          resorigtbl: non_neg_integer(),
          ressortgroupref: non_neg_integer(),
          resname: String.t(),
          resno: integer(),
          expr: PgQuery.Node.t() | nil,
          xpr: PgQuery.Node.t() | nil,
          __uf__: [{non_neg_integer(), Protox.Types.tag(), binary()}]
        }
  defstruct resjunk: false,
            resorigcol: 0,
            resorigtbl: 0,
            ressortgroupref: 0,
            resname: "",
            resno: 0,
            expr: nil,
            xpr: nil,
            __uf__: []

  (
    (
      @spec encode(t()) :: {:ok, iodata(), non_neg_integer()} | {:error, any()}
      def encode(msg) do
        msg |> encode!() |> Tuple.insert_at(0, :ok)
      rescue
        e in [Protox.EncodingError, Protox.RequiredFieldsError] -> {:error, e}
      end

      @spec encode!(t()) :: {iodata(), non_neg_integer()} | no_return()
      def encode!(msg) do
        {_acc = [], _acc_size = 0}
        |> encode_resjunk(msg)
        |> encode_resorigcol(msg)
        |> encode_resorigtbl(msg)
        |> encode_ressortgroupref(msg)
        |> encode_resname(msg)
        |> encode_resno(msg)
        |> encode_expr(msg)
        |> encode_xpr(msg)
        |> encode_unknown_fields(msg)
      end
    )

    defp encode_resjunk({acc, acc_size}, msg) do
      if msg.resjunk == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.resjunk)
        {["@", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:resjunk, "invalid field value"), __STACKTRACE__
    end

    defp encode_resorigcol({acc, acc_size}, msg) do
      if msg.resorigcol == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int32(msg.resorigcol)
        {["8", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:resorigcol, "invalid field value"), __STACKTRACE__
    end

    defp encode_resorigtbl({acc, acc_size}, msg) do
      if msg.resorigtbl == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.resorigtbl)
        {["0", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:resorigtbl, "invalid field value"), __STACKTRACE__
    end

    defp encode_ressortgroupref({acc, acc_size}, msg) do
      if msg.ressortgroupref == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.ressortgroupref)
        {["(", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:ressortgroupref, "invalid field value"), __STACKTRACE__
    end

    defp encode_resname({acc, acc_size}, msg) do
      if msg.resname == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.resname)
        {["\"", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:resname, "invalid field value"), __STACKTRACE__
    end

    defp encode_resno({acc, acc_size}, msg) do
      if msg.resno == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int32(msg.resno)
        {["\x18", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:resno, "invalid field value"), __STACKTRACE__
    end

    defp encode_expr({acc, acc_size}, msg) do
      if msg.expr == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.expr)
        {["\x12", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:expr, "invalid field value"), __STACKTRACE__
    end

    defp encode_xpr({acc, acc_size}, msg) do
      if msg.xpr == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.xpr)
        {["\n", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:xpr, "invalid field value"), __STACKTRACE__
    end

    defp encode_unknown_fields({acc, acc_size}, msg) do
      Enum.reduce(msg.__uf__, {acc, acc_size}, fn {tag, wire_type, bytes}, {acc, acc_size} ->
        case wire_type do
          0 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :int32)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          1 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :double)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          2 ->
            {len_bytes, len_size} = bytes |> byte_size() |> Protox.Varint.encode()
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :packed)

            {[acc, <<key_bytes::binary, len_bytes::binary, bytes::binary>>],
             acc_size + key_size + len_size + byte_size(bytes)}

          5 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :float)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}
        end
      end)
    end
  )

  (
    (
      @spec decode(binary()) :: {:ok, t()} | {:error, any()}
      def decode(bytes) do
        {:ok, decode!(bytes)}
      rescue
        e in [Protox.DecodingError, Protox.IllegalTagError, Protox.RequiredFieldsError] ->
          {:error, e}
      end

      (
        @spec decode!(binary()) :: t() | no_return()
        def decode!(bytes) do
          parse_key_value(bytes, struct(PgQuery.TargetEntry))
        end
      )
    )

    (
      @spec parse_key_value(binary(), struct()) :: struct()
      defp parse_key_value(<<>>, msg) do
        msg
      end

      defp parse_key_value(bytes, msg) do
        {field, rest} =
          case bytes do
            <<_::5, 3::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 3")

            <<_::5, 4::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 4")

            <<_::5, 6::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 6")

            <<_::5, 7::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 7")

            <<0::5, _::3, _rest::binary>> ->
              raise %Protox.IllegalTagError{}

            <<8::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[resjunk: value], rest}

            <<7::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int32(bytes)
              {[resorigcol: value], rest}

            <<6::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[resorigtbl: value], rest}

            <<5::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[ressortgroupref: value], rest}

            <<4::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[resname: Protox.Decode.validate_string!(delimited)], rest}

            <<3::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int32(bytes)
              {[resno: value], rest}

            <<2::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[expr: Protox.MergeMessage.merge(msg.expr, PgQuery.Node.decode!(delimited))], rest}

            <<1::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[xpr: Protox.MergeMessage.merge(msg.xpr, PgQuery.Node.decode!(delimited))], rest}

            <<bytes::binary>> ->
              {tag, wire_type, rest} = Protox.Decode.parse_key(bytes)
              {value, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {[__uf__: msg.__uf__ ++ [value]], rest}
          end

        msg_updated = struct(msg, field)
        parse_key_value(rest, msg_updated)
      end
    )
  )

  (
    @spec unknown_fields(struct()) :: [{non_neg_integer(), Protox.Types.tag(), binary()}]
    def unknown_fields(msg) do
      msg.__uf__
    end

    @spec unknown_fields_name() :: :__uf__
    def unknown_fields_name() do
      :__uf__
    end

    @spec clear_unknown_fields(struct) :: struct
    def clear_unknown_fields(msg) do
      struct!(msg, __uf__: [])
    end
  )

  (
    @spec default(atom()) ::
            {:ok, boolean() | integer() | String.t() | float()}
            | {:error, :no_such_field | :no_default_value}
    def default(:resjunk) do
      {:ok, false}
    end

    def default(:resorigcol) do
      {:ok, 0}
    end

    def default(:resorigtbl) do
      {:ok, 0}
    end

    def default(:ressortgroupref) do
      {:ok, 0}
    end

    def default(:resname) do
      {:ok, ""}
    end

    def default(:resno) do
      {:ok, 0}
    end

    def default(:expr) do
      {:ok, nil}
    end

    def default(:xpr) do
      {:ok, nil}
    end

    def default(_) do
      {:error, :no_such_field}
    end
  )

  @spec schema() :: Protox.MessageSchema.t()
  def schema() do
    %{
      __struct__: Protox.MessageSchema,
      fields: %{
        expr: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :expr,
          tag: 2,
          type: {:message, PgQuery.Node}
        },
        resjunk: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :resjunk,
          tag: 8,
          type: :bool
        },
        resname: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :resname,
          tag: 4,
          type: :string
        },
        resno: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :resno,
          tag: 3,
          type: :int32
        },
        resorigcol: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :resorigcol,
          tag: 7,
          type: :int32
        },
        resorigtbl: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :resorigtbl,
          tag: 6,
          type: :uint32
        },
        ressortgroupref: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :ressortgroupref,
          tag: 5,
          type: :uint32
        },
        xpr: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :xpr,
          tag: 1,
          type: {:message, PgQuery.Node}
        }
      },
      file_options: nil,
      name: PgQuery.TargetEntry,
      syntax: :proto3
    }
  end
end
