# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule PgQuery.IndexStmt do
  @moduledoc false
  if function_exported?(Protox, :check_generator_version, 1) do
    Protox.check_generator_version(1)
  else
    raise "This code was generated with protox 2 but the runtime is using an older version of protox."
  end

  @type t :: %__MODULE__{
          reset_default_tblspc: boolean(),
          if_not_exists: boolean(),
          concurrent: boolean(),
          transformed: boolean(),
          initdeferred: boolean(),
          deferrable: boolean(),
          isconstraint: boolean(),
          primary: boolean(),
          nulls_not_distinct: boolean(),
          unique: boolean(),
          old_first_relfilenode_subid: non_neg_integer(),
          old_create_subid: non_neg_integer(),
          old_node: non_neg_integer(),
          index_oid: non_neg_integer(),
          idxcomment: String.t(),
          exclude_op_names: [PgQuery.Node.t()],
          where_clause: PgQuery.Node.t() | nil,
          options: [PgQuery.Node.t()],
          index_including_params: [PgQuery.Node.t()],
          index_params: [PgQuery.Node.t()],
          table_space: String.t(),
          access_method: String.t(),
          relation: PgQuery.RangeVar.t() | nil,
          idxname: String.t(),
          __uf__: [{non_neg_integer(), Protox.Types.tag(), binary()}]
        }
  defstruct reset_default_tblspc: false,
            if_not_exists: false,
            concurrent: false,
            transformed: false,
            initdeferred: false,
            deferrable: false,
            isconstraint: false,
            primary: false,
            nulls_not_distinct: false,
            unique: false,
            old_first_relfilenode_subid: 0,
            old_create_subid: 0,
            old_node: 0,
            index_oid: 0,
            idxcomment: "",
            exclude_op_names: [],
            where_clause: nil,
            options: [],
            index_including_params: [],
            index_params: [],
            table_space: "",
            access_method: "",
            relation: nil,
            idxname: "",
            __uf__: []

  (
    (
      @spec encode(t()) :: {:ok, iodata(), non_neg_integer()} | {:error, any()}
      def encode(msg) do
        msg |> encode!() |> Tuple.insert_at(0, :ok)
      rescue
        e in [Protox.EncodingError, Protox.RequiredFieldsError] -> {:error, e}
      end

      @spec encode!(t()) :: {iodata(), non_neg_integer()} | no_return()
      def encode!(msg) do
        {_acc = [], _acc_size = 0}
        |> encode_reset_default_tblspc(msg)
        |> encode_if_not_exists(msg)
        |> encode_concurrent(msg)
        |> encode_transformed(msg)
        |> encode_initdeferred(msg)
        |> encode_deferrable(msg)
        |> encode_isconstraint(msg)
        |> encode_primary(msg)
        |> encode_nulls_not_distinct(msg)
        |> encode_unique(msg)
        |> encode_old_first_relfilenode_subid(msg)
        |> encode_old_create_subid(msg)
        |> encode_old_node(msg)
        |> encode_index_oid(msg)
        |> encode_idxcomment(msg)
        |> encode_exclude_op_names(msg)
        |> encode_where_clause(msg)
        |> encode_options(msg)
        |> encode_index_including_params(msg)
        |> encode_index_params(msg)
        |> encode_table_space(msg)
        |> encode_access_method(msg)
        |> encode_relation(msg)
        |> encode_idxname(msg)
        |> encode_unknown_fields(msg)
      end
    )

    defp encode_reset_default_tblspc({acc, acc_size}, msg) do
      if msg.reset_default_tblspc == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.reset_default_tblspc)
        {["\xC0\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:reset_default_tblspc, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_if_not_exists({acc, acc_size}, msg) do
      if msg.if_not_exists == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.if_not_exists)
        {["\xB8\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:if_not_exists, "invalid field value"), __STACKTRACE__
    end

    defp encode_concurrent({acc, acc_size}, msg) do
      if msg.concurrent == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.concurrent)
        {["\xB0\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:concurrent, "invalid field value"), __STACKTRACE__
    end

    defp encode_transformed({acc, acc_size}, msg) do
      if msg.transformed == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.transformed)
        {["\xA8\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:transformed, "invalid field value"), __STACKTRACE__
    end

    defp encode_initdeferred({acc, acc_size}, msg) do
      if msg.initdeferred == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.initdeferred)
        {["\xA0\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:initdeferred, "invalid field value"), __STACKTRACE__
    end

    defp encode_deferrable({acc, acc_size}, msg) do
      if msg.deferrable == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.deferrable)
        {["\x98\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:deferrable, "invalid field value"), __STACKTRACE__
    end

    defp encode_isconstraint({acc, acc_size}, msg) do
      if msg.isconstraint == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.isconstraint)
        {["\x90\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:isconstraint, "invalid field value"), __STACKTRACE__
    end

    defp encode_primary({acc, acc_size}, msg) do
      if msg.primary == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.primary)
        {["\x88\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:primary, "invalid field value"), __STACKTRACE__
    end

    defp encode_nulls_not_distinct({acc, acc_size}, msg) do
      if msg.nulls_not_distinct == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.nulls_not_distinct)
        {["\x80\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:nulls_not_distinct, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_unique({acc, acc_size}, msg) do
      if msg.unique == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.unique)
        {["x", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:unique, "invalid field value"), __STACKTRACE__
    end

    defp encode_old_first_relfilenode_subid({acc, acc_size}, msg) do
      if msg.old_first_relfilenode_subid == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} =
          Protox.Encode.encode_uint32(msg.old_first_relfilenode_subid)

        {["p", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:old_first_relfilenode_subid, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_old_create_subid({acc, acc_size}, msg) do
      if msg.old_create_subid == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.old_create_subid)
        {["h", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:old_create_subid, "invalid field value"), __STACKTRACE__
    end

    defp encode_old_node({acc, acc_size}, msg) do
      if msg.old_node == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.old_node)
        {["`", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:old_node, "invalid field value"), __STACKTRACE__
    end

    defp encode_index_oid({acc, acc_size}, msg) do
      if msg.index_oid == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.index_oid)
        {["X", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:index_oid, "invalid field value"), __STACKTRACE__
    end

    defp encode_idxcomment({acc, acc_size}, msg) do
      if msg.idxcomment == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.idxcomment)
        {["R", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:idxcomment, "invalid field value"), __STACKTRACE__
    end

    defp encode_exclude_op_names({acc, acc_size}, msg) do
      case msg.exclude_op_names do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "J" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:exclude_op_names, "invalid field value"), __STACKTRACE__
    end

    defp encode_where_clause({acc, acc_size}, msg) do
      if msg.where_clause == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.where_clause)
        {["B", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:where_clause, "invalid field value"), __STACKTRACE__
    end

    defp encode_options({acc, acc_size}, msg) do
      case msg.options do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, ":" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:options, "invalid field value"), __STACKTRACE__
    end

    defp encode_index_including_params({acc, acc_size}, msg) do
      case msg.index_including_params do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "2" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:index_including_params, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_index_params({acc, acc_size}, msg) do
      case msg.index_params do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "*" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:index_params, "invalid field value"), __STACKTRACE__
    end

    defp encode_table_space({acc, acc_size}, msg) do
      if msg.table_space == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.table_space)
        {["\"", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:table_space, "invalid field value"), __STACKTRACE__
    end

    defp encode_access_method({acc, acc_size}, msg) do
      if msg.access_method == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.access_method)
        {["\x1A", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:access_method, "invalid field value"), __STACKTRACE__
    end

    defp encode_relation({acc, acc_size}, msg) do
      if msg.relation == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.relation)
        {["\x12", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:relation, "invalid field value"), __STACKTRACE__
    end

    defp encode_idxname({acc, acc_size}, msg) do
      if msg.idxname == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.idxname)
        {["\n", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:idxname, "invalid field value"), __STACKTRACE__
    end

    defp encode_unknown_fields({acc, acc_size}, msg) do
      Enum.reduce(msg.__uf__, {acc, acc_size}, fn {tag, wire_type, bytes}, {acc, acc_size} ->
        case wire_type do
          0 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :int32)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          1 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :double)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          2 ->
            {len_bytes, len_size} = bytes |> byte_size() |> Protox.Varint.encode()
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :packed)

            {[acc, <<key_bytes::binary, len_bytes::binary, bytes::binary>>],
             acc_size + key_size + len_size + byte_size(bytes)}

          5 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :float)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}
        end
      end)
    end
  )

  (
    (
      @spec decode(binary()) :: {:ok, t()} | {:error, any()}
      def decode(bytes) do
        {:ok, decode!(bytes)}
      rescue
        e in [Protox.DecodingError, Protox.IllegalTagError, Protox.RequiredFieldsError] ->
          {:error, e}
      end

      (
        @spec decode!(binary()) :: t() | no_return()
        def decode!(bytes) do
          parse_key_value(bytes, struct(PgQuery.IndexStmt))
        end
      )
    )

    (
      @spec parse_key_value(binary(), struct()) :: struct()
      defp parse_key_value(<<>>, msg) do
        msg
      end

      defp parse_key_value(bytes, msg) do
        {field, rest} =
          case bytes do
            <<_::5, 3::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 3")

            <<_::5, 4::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 4")

            <<_::5, 6::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 6")

            <<_::5, 7::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 7")

            <<0::5, _::3, _rest::binary>> ->
              raise %Protox.IllegalTagError{}

            <<24::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[reset_default_tblspc: value], rest}

            <<23::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[if_not_exists: value], rest}

            <<22::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[concurrent: value], rest}

            <<21::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[transformed: value], rest}

            <<20::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[initdeferred: value], rest}

            <<19::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[deferrable: value], rest}

            <<18::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[isconstraint: value], rest}

            <<17::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[primary: value], rest}

            <<16::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[nulls_not_distinct: value], rest}

            <<15::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[unique: value], rest}

            <<14::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[old_first_relfilenode_subid: value], rest}

            <<13::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[old_create_subid: value], rest}

            <<12::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[old_node: value], rest}

            <<11::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[index_oid: value], rest}

            <<10::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[idxcomment: Protox.Decode.validate_string!(delimited)], rest}

            <<9::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[exclude_op_names: msg.exclude_op_names ++ [PgQuery.Node.decode!(delimited)]],
               rest}

            <<8::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 where_clause:
                   Protox.MergeMessage.merge(msg.where_clause, PgQuery.Node.decode!(delimited))
               ], rest}

            <<7::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[options: msg.options ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<6::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 index_including_params:
                   msg.index_including_params ++ [PgQuery.Node.decode!(delimited)]
               ], rest}

            <<5::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[index_params: msg.index_params ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<4::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[table_space: Protox.Decode.validate_string!(delimited)], rest}

            <<3::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[access_method: Protox.Decode.validate_string!(delimited)], rest}

            <<2::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 relation:
                   Protox.MergeMessage.merge(msg.relation, PgQuery.RangeVar.decode!(delimited))
               ], rest}

            <<1::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[idxname: Protox.Decode.validate_string!(delimited)], rest}

            <<bytes::binary>> ->
              {tag, wire_type, rest} = Protox.Decode.parse_key(bytes)
              {value, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {[__uf__: msg.__uf__ ++ [value]], rest}
          end

        msg_updated = struct(msg, field)
        parse_key_value(rest, msg_updated)
      end
    )
  )

  (
    @spec unknown_fields(struct()) :: [{non_neg_integer(), Protox.Types.tag(), binary()}]
    def unknown_fields(msg) do
      msg.__uf__
    end

    @spec unknown_fields_name() :: :__uf__
    def unknown_fields_name() do
      :__uf__
    end

    @spec clear_unknown_fields(struct) :: struct
    def clear_unknown_fields(msg) do
      struct!(msg, __uf__: [])
    end
  )

  (
    @spec default(atom()) ::
            {:ok, boolean() | integer() | String.t() | float()}
            | {:error, :no_such_field | :no_default_value}
    def default(:reset_default_tblspc) do
      {:ok, false}
    end

    def default(:if_not_exists) do
      {:ok, false}
    end

    def default(:concurrent) do
      {:ok, false}
    end

    def default(:transformed) do
      {:ok, false}
    end

    def default(:initdeferred) do
      {:ok, false}
    end

    def default(:deferrable) do
      {:ok, false}
    end

    def default(:isconstraint) do
      {:ok, false}
    end

    def default(:primary) do
      {:ok, false}
    end

    def default(:nulls_not_distinct) do
      {:ok, false}
    end

    def default(:unique) do
      {:ok, false}
    end

    def default(:old_first_relfilenode_subid) do
      {:ok, 0}
    end

    def default(:old_create_subid) do
      {:ok, 0}
    end

    def default(:old_node) do
      {:ok, 0}
    end

    def default(:index_oid) do
      {:ok, 0}
    end

    def default(:idxcomment) do
      {:ok, ""}
    end

    def default(:exclude_op_names) do
      {:error, :no_default_value}
    end

    def default(:where_clause) do
      {:ok, nil}
    end

    def default(:options) do
      {:error, :no_default_value}
    end

    def default(:index_including_params) do
      {:error, :no_default_value}
    end

    def default(:index_params) do
      {:error, :no_default_value}
    end

    def default(:table_space) do
      {:ok, ""}
    end

    def default(:access_method) do
      {:ok, ""}
    end

    def default(:relation) do
      {:ok, nil}
    end

    def default(:idxname) do
      {:ok, ""}
    end

    def default(_) do
      {:error, :no_such_field}
    end
  )

  @spec schema() :: Protox.MessageSchema.t()
  def schema() do
    %{
      __struct__: Protox.MessageSchema,
      fields: %{
        access_method: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :access_method,
          tag: 3,
          type: :string
        },
        concurrent: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :concurrent,
          tag: 22,
          type: :bool
        },
        deferrable: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :deferrable,
          tag: 19,
          type: :bool
        },
        exclude_op_names: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :exclude_op_names,
          tag: 9,
          type: {:message, PgQuery.Node}
        },
        idxcomment: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :idxcomment,
          tag: 10,
          type: :string
        },
        idxname: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :idxname,
          tag: 1,
          type: :string
        },
        if_not_exists: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :if_not_exists,
          tag: 23,
          type: :bool
        },
        index_including_params: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :index_including_params,
          tag: 6,
          type: {:message, PgQuery.Node}
        },
        index_oid: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :index_oid,
          tag: 11,
          type: :uint32
        },
        index_params: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :index_params,
          tag: 5,
          type: {:message, PgQuery.Node}
        },
        initdeferred: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :initdeferred,
          tag: 20,
          type: :bool
        },
        isconstraint: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :isconstraint,
          tag: 18,
          type: :bool
        },
        nulls_not_distinct: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :nulls_not_distinct,
          tag: 16,
          type: :bool
        },
        old_create_subid: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :old_create_subid,
          tag: 13,
          type: :uint32
        },
        old_first_relfilenode_subid: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :old_first_relfilenode_subid,
          tag: 14,
          type: :uint32
        },
        old_node: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :old_node,
          tag: 12,
          type: :uint32
        },
        options: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :options,
          tag: 7,
          type: {:message, PgQuery.Node}
        },
        primary: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :primary,
          tag: 17,
          type: :bool
        },
        relation: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :relation,
          tag: 2,
          type: {:message, PgQuery.RangeVar}
        },
        reset_default_tblspc: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :reset_default_tblspc,
          tag: 24,
          type: :bool
        },
        table_space: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :table_space,
          tag: 4,
          type: :string
        },
        transformed: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :transformed,
          tag: 21,
          type: :bool
        },
        unique: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :unique,
          tag: 15,
          type: :bool
        },
        where_clause: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :where_clause,
          tag: 8,
          type: {:message, PgQuery.Node}
        }
      },
      file_options: nil,
      name: PgQuery.IndexStmt,
      syntax: :proto3
    }
  end
end
