# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule PgQuery.GroupingSetKind do
  @moduledoc false
  @type t :: %__MODULE__{}
  defstruct []

  (
    @spec default() :: :GROUPING_SET_KIND_UNDEFINED
    def default() do
      :GROUPING_SET_KIND_UNDEFINED
    end
  )

  @spec encode(atom() | String.t()) :: integer() | atom()
  def encode(:GROUPING_SET_KIND_UNDEFINED) do
    0
  end

  def encode(:GROUPING_SET_EMPTY) do
    1
  end

  def encode(:GROUPING_SET_SIMPLE) do
    2
  end

  def encode(:GROUPING_SET_ROLLUP) do
    3
  end

  def encode(:GROUPING_SET_CUBE) do
    4
  end

  def encode(:GROUPING_SET_SETS) do
    5
  end

  def encode(x) do
    x
  end

  @spec decode(integer()) :: atom() | integer()
  def decode(0) do
    :GROUPING_SET_KIND_UNDEFINED
  end

  def decode(1) do
    :GROUPING_SET_EMPTY
  end

  def decode(2) do
    :GROUPING_SET_SIMPLE
  end

  def decode(3) do
    :GROUPING_SET_ROLLUP
  end

  def decode(4) do
    :GROUPING_SET_CUBE
  end

  def decode(5) do
    :GROUPING_SET_SETS
  end

  def decode(x) do
    x
  end

  @spec constants() :: [{integer(), atom()}]
  def constants() do
    [
      {0, :GROUPING_SET_KIND_UNDEFINED},
      {1, :GROUPING_SET_EMPTY},
      {2, :GROUPING_SET_SIMPLE},
      {3, :GROUPING_SET_ROLLUP},
      {4, :GROUPING_SET_CUBE},
      {5, :GROUPING_SET_SETS}
    ]
  end

  @spec has_constant?(any()) :: boolean()
  (
    def has_constant?(:GROUPING_SET_KIND_UNDEFINED) do
      true
    end

    def has_constant?(:GROUPING_SET_EMPTY) do
      true
    end

    def has_constant?(:GROUPING_SET_SIMPLE) do
      true
    end

    def has_constant?(:GROUPING_SET_ROLLUP) do
      true
    end

    def has_constant?(:GROUPING_SET_CUBE) do
      true
    end

    def has_constant?(:GROUPING_SET_SETS) do
      true
    end

    def has_constant?(_) do
      false
    end
  )
end
