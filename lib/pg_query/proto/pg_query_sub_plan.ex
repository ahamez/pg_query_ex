# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule PgQuery.SubPlan do
  @moduledoc false
  if function_exported?(Protox, :check_generator_version, 1) do
    Protox.check_generator_version(1)
  else
    raise "This code was generated with protox 2 but the runtime is using an older version of protox."
  end

  @type t :: %__MODULE__{
          per_call_cost: float(),
          startup_cost: float(),
          args: [PgQuery.Node.t()],
          par_param: [PgQuery.Node.t()],
          set_param: [PgQuery.Node.t()],
          parallel_safe: boolean(),
          unknown_eq_false: boolean(),
          use_hash_table: boolean(),
          first_col_collation: non_neg_integer(),
          first_col_typmod: integer(),
          first_col_type: non_neg_integer(),
          plan_name: String.t(),
          plan_id: integer(),
          param_ids: [PgQuery.Node.t()],
          testexpr: PgQuery.Node.t() | nil,
          sub_link_type: atom(),
          xpr: PgQuery.Node.t() | nil,
          __uf__: [{non_neg_integer(), Protox.Types.tag(), binary()}]
        }
  defstruct per_call_cost: 0.0,
            startup_cost: 0.0,
            args: [],
            par_param: [],
            set_param: [],
            parallel_safe: false,
            unknown_eq_false: false,
            use_hash_table: false,
            first_col_collation: 0,
            first_col_typmod: 0,
            first_col_type: 0,
            plan_name: "",
            plan_id: 0,
            param_ids: [],
            testexpr: nil,
            sub_link_type: :SUB_LINK_TYPE_UNDEFINED,
            xpr: nil,
            __uf__: []

  (
    (
      @spec encode(t()) :: {:ok, iodata(), non_neg_integer()} | {:error, any()}
      def encode(msg) do
        msg |> encode!() |> Tuple.insert_at(0, :ok)
      rescue
        e in [Protox.EncodingError, Protox.RequiredFieldsError] -> {:error, e}
      end

      @spec encode!(t()) :: {iodata(), non_neg_integer()} | no_return()
      def encode!(msg) do
        {_acc = [], _acc_size = 0}
        |> encode_per_call_cost(msg)
        |> encode_startup_cost(msg)
        |> encode_args(msg)
        |> encode_par_param(msg)
        |> encode_set_param(msg)
        |> encode_parallel_safe(msg)
        |> encode_unknown_eq_false(msg)
        |> encode_use_hash_table(msg)
        |> encode_first_col_collation(msg)
        |> encode_first_col_typmod(msg)
        |> encode_first_col_type(msg)
        |> encode_plan_name(msg)
        |> encode_plan_id(msg)
        |> encode_param_ids(msg)
        |> encode_testexpr(msg)
        |> encode_sub_link_type(msg)
        |> encode_xpr(msg)
        |> encode_unknown_fields(msg)
      end
    )

    defp encode_per_call_cost({acc, acc_size}, msg) do
      if msg.per_call_cost == 0.0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_double(msg.per_call_cost)
        {["\x89\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:per_call_cost, "invalid field value"), __STACKTRACE__
    end

    defp encode_startup_cost({acc, acc_size}, msg) do
      if msg.startup_cost == 0.0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_double(msg.startup_cost)
        {["\x81\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:startup_cost, "invalid field value"), __STACKTRACE__
    end

    defp encode_args({acc, acc_size}, msg) do
      case msg.args do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "z" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:args, "invalid field value"), __STACKTRACE__
    end

    defp encode_par_param({acc, acc_size}, msg) do
      case msg.par_param do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "r" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:par_param, "invalid field value"), __STACKTRACE__
    end

    defp encode_set_param({acc, acc_size}, msg) do
      case msg.set_param do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "j" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:set_param, "invalid field value"), __STACKTRACE__
    end

    defp encode_parallel_safe({acc, acc_size}, msg) do
      if msg.parallel_safe == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.parallel_safe)
        {["`", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:parallel_safe, "invalid field value"), __STACKTRACE__
    end

    defp encode_unknown_eq_false({acc, acc_size}, msg) do
      if msg.unknown_eq_false == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.unknown_eq_false)
        {["X", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:unknown_eq_false, "invalid field value"), __STACKTRACE__
    end

    defp encode_use_hash_table({acc, acc_size}, msg) do
      if msg.use_hash_table == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.use_hash_table)
        {["P", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:use_hash_table, "invalid field value"), __STACKTRACE__
    end

    defp encode_first_col_collation({acc, acc_size}, msg) do
      if msg.first_col_collation == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.first_col_collation)
        {["H", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:first_col_collation, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_first_col_typmod({acc, acc_size}, msg) do
      if msg.first_col_typmod == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int32(msg.first_col_typmod)
        {["@", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:first_col_typmod, "invalid field value"), __STACKTRACE__
    end

    defp encode_first_col_type({acc, acc_size}, msg) do
      if msg.first_col_type == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.first_col_type)
        {["8", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:first_col_type, "invalid field value"), __STACKTRACE__
    end

    defp encode_plan_name({acc, acc_size}, msg) do
      if msg.plan_name == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.plan_name)
        {["2", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:plan_name, "invalid field value"), __STACKTRACE__
    end

    defp encode_plan_id({acc, acc_size}, msg) do
      if msg.plan_id == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int32(msg.plan_id)
        {["(", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:plan_id, "invalid field value"), __STACKTRACE__
    end

    defp encode_param_ids({acc, acc_size}, msg) do
      case msg.param_ids do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "\"" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:param_ids, "invalid field value"), __STACKTRACE__
    end

    defp encode_testexpr({acc, acc_size}, msg) do
      if msg.testexpr == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.testexpr)
        {["\x1A", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:testexpr, "invalid field value"), __STACKTRACE__
    end

    defp encode_sub_link_type({acc, acc_size}, msg) do
      if msg.sub_link_type == :SUB_LINK_TYPE_UNDEFINED do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} =
          msg.sub_link_type |> PgQuery.SubLinkType.encode() |> Protox.Encode.encode_enum()

        {["\x10", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:sub_link_type, "invalid field value"), __STACKTRACE__
    end

    defp encode_xpr({acc, acc_size}, msg) do
      if msg.xpr == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.xpr)
        {["\n", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:xpr, "invalid field value"), __STACKTRACE__
    end

    defp encode_unknown_fields({acc, acc_size}, msg) do
      Enum.reduce(msg.__uf__, {acc, acc_size}, fn {tag, wire_type, bytes}, {acc, acc_size} ->
        case wire_type do
          0 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :int32)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          1 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :double)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          2 ->
            {len_bytes, len_size} = bytes |> byte_size() |> Protox.Varint.encode()
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :packed)

            {[acc, <<key_bytes::binary, len_bytes::binary, bytes::binary>>],
             acc_size + key_size + len_size + byte_size(bytes)}

          5 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :float)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}
        end
      end)
    end
  )

  (
    (
      @spec decode(binary()) :: {:ok, t()} | {:error, any()}
      def decode(bytes) do
        {:ok, decode!(bytes)}
      rescue
        e in [Protox.DecodingError, Protox.IllegalTagError, Protox.RequiredFieldsError] ->
          {:error, e}
      end

      (
        @spec decode!(binary()) :: t() | no_return()
        def decode!(bytes) do
          parse_key_value(bytes, struct(PgQuery.SubPlan))
        end
      )
    )

    (
      @spec parse_key_value(binary(), struct()) :: struct()
      defp parse_key_value(<<>>, msg) do
        msg
      end

      defp parse_key_value(bytes, msg) do
        {field, rest} =
          case bytes do
            <<_::5, 3::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 3")

            <<_::5, 4::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 4")

            <<_::5, 6::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 6")

            <<_::5, 7::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 7")

            <<0::5, _::3, _rest::binary>> ->
              raise %Protox.IllegalTagError{}

            <<17::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_double(bytes)
              {[per_call_cost: value], rest}

            <<16::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_double(bytes)
              {[startup_cost: value], rest}

            <<15::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[args: msg.args ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<14::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[par_param: msg.par_param ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<13::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[set_param: msg.set_param ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<12::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[parallel_safe: value], rest}

            <<11::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[unknown_eq_false: value], rest}

            <<10::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[use_hash_table: value], rest}

            <<9::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[first_col_collation: value], rest}

            <<8::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int32(bytes)
              {[first_col_typmod: value], rest}

            <<7::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[first_col_type: value], rest}

            <<6::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[plan_name: Protox.Decode.validate_string!(delimited)], rest}

            <<5::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int32(bytes)
              {[plan_id: value], rest}

            <<4::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[param_ids: msg.param_ids ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<3::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 testexpr:
                   Protox.MergeMessage.merge(msg.testexpr, PgQuery.Node.decode!(delimited))
               ], rest}

            <<2::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_enum(bytes, PgQuery.SubLinkType)
              {[sub_link_type: value], rest}

            <<1::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[xpr: Protox.MergeMessage.merge(msg.xpr, PgQuery.Node.decode!(delimited))], rest}

            <<bytes::binary>> ->
              {tag, wire_type, rest} = Protox.Decode.parse_key(bytes)
              {value, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {[__uf__: msg.__uf__ ++ [value]], rest}
          end

        msg_updated = struct(msg, field)
        parse_key_value(rest, msg_updated)
      end
    )
  )

  (
    @spec unknown_fields(struct()) :: [{non_neg_integer(), Protox.Types.tag(), binary()}]
    def unknown_fields(msg) do
      msg.__uf__
    end

    @spec unknown_fields_name() :: :__uf__
    def unknown_fields_name() do
      :__uf__
    end

    @spec clear_unknown_fields(struct) :: struct
    def clear_unknown_fields(msg) do
      struct!(msg, __uf__: [])
    end
  )

  (
    @spec default(atom()) ::
            {:ok, boolean() | integer() | String.t() | float()}
            | {:error, :no_such_field | :no_default_value}
    def default(:per_call_cost) do
      {:ok, 0.0}
    end

    def default(:startup_cost) do
      {:ok, 0.0}
    end

    def default(:args) do
      {:error, :no_default_value}
    end

    def default(:par_param) do
      {:error, :no_default_value}
    end

    def default(:set_param) do
      {:error, :no_default_value}
    end

    def default(:parallel_safe) do
      {:ok, false}
    end

    def default(:unknown_eq_false) do
      {:ok, false}
    end

    def default(:use_hash_table) do
      {:ok, false}
    end

    def default(:first_col_collation) do
      {:ok, 0}
    end

    def default(:first_col_typmod) do
      {:ok, 0}
    end

    def default(:first_col_type) do
      {:ok, 0}
    end

    def default(:plan_name) do
      {:ok, ""}
    end

    def default(:plan_id) do
      {:ok, 0}
    end

    def default(:param_ids) do
      {:error, :no_default_value}
    end

    def default(:testexpr) do
      {:ok, nil}
    end

    def default(:sub_link_type) do
      {:ok, :SUB_LINK_TYPE_UNDEFINED}
    end

    def default(:xpr) do
      {:ok, nil}
    end

    def default(_) do
      {:error, :no_such_field}
    end
  )

  @spec schema() :: Protox.MessageSchema.t()
  def schema() do
    %{
      __struct__: Protox.MessageSchema,
      fields: %{
        args: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :args,
          tag: 15,
          type: {:message, PgQuery.Node}
        },
        first_col_collation: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :first_col_collation,
          tag: 9,
          type: :uint32
        },
        first_col_type: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :first_col_type,
          tag: 7,
          type: :uint32
        },
        first_col_typmod: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :first_col_typmod,
          tag: 8,
          type: :int32
        },
        par_param: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :par_param,
          tag: 14,
          type: {:message, PgQuery.Node}
        },
        parallel_safe: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :parallel_safe,
          tag: 12,
          type: :bool
        },
        param_ids: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :param_ids,
          tag: 4,
          type: {:message, PgQuery.Node}
        },
        per_call_cost: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0.0},
          label: :optional,
          name: :per_call_cost,
          tag: 17,
          type: :double
        },
        plan_id: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :plan_id,
          tag: 5,
          type: :int32
        },
        plan_name: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :plan_name,
          tag: 6,
          type: :string
        },
        set_param: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :set_param,
          tag: 13,
          type: {:message, PgQuery.Node}
        },
        startup_cost: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0.0},
          label: :optional,
          name: :startup_cost,
          tag: 16,
          type: :double
        },
        sub_link_type: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: :SUB_LINK_TYPE_UNDEFINED},
          label: :optional,
          name: :sub_link_type,
          tag: 2,
          type: {:enum, PgQuery.SubLinkType}
        },
        testexpr: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :testexpr,
          tag: 3,
          type: {:message, PgQuery.Node}
        },
        unknown_eq_false: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :unknown_eq_false,
          tag: 11,
          type: :bool
        },
        use_hash_table: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :use_hash_table,
          tag: 10,
          type: :bool
        },
        xpr: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :xpr,
          tag: 1,
          type: {:message, PgQuery.Node}
        }
      },
      file_options: nil,
      name: PgQuery.SubPlan,
      syntax: :proto3
    }
  end
end
