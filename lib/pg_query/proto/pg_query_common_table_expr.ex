# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule PgQuery.CommonTableExpr do
  @moduledoc false
  if function_exported?(Protox, :check_generator_version, 1) do
    Protox.check_generator_version(1)
  else
    raise "This code was generated with protox 2 but the runtime is using an older version of protox."
  end

  @type t :: %__MODULE__{
          ctecolcollations: [PgQuery.Node.t()],
          ctecoltypmods: [PgQuery.Node.t()],
          ctecoltypes: [PgQuery.Node.t()],
          ctecolnames: [PgQuery.Node.t()],
          cterefcount: integer(),
          cterecursive: boolean(),
          location: integer(),
          cycle_clause: PgQuery.CTECycleClause.t() | nil,
          search_clause: PgQuery.CTESearchClause.t() | nil,
          ctequery: PgQuery.Node.t() | nil,
          ctematerialized: atom(),
          aliascolnames: [PgQuery.Node.t()],
          ctename: String.t(),
          __uf__: [{non_neg_integer(), Protox.Types.tag(), binary()}]
        }
  defstruct ctecolcollations: [],
            ctecoltypmods: [],
            ctecoltypes: [],
            ctecolnames: [],
            cterefcount: 0,
            cterecursive: false,
            location: 0,
            cycle_clause: nil,
            search_clause: nil,
            ctequery: nil,
            ctematerialized: :CTEMATERIALIZE_UNDEFINED,
            aliascolnames: [],
            ctename: "",
            __uf__: []

  (
    (
      @spec encode(t()) :: {:ok, iodata(), non_neg_integer()} | {:error, any()}
      def encode(msg) do
        msg |> encode!() |> Tuple.insert_at(0, :ok)
      rescue
        e in [Protox.EncodingError, Protox.RequiredFieldsError] -> {:error, e}
      end

      @spec encode!(t()) :: {iodata(), non_neg_integer()} | no_return()
      def encode!(msg) do
        {_acc = [], _acc_size = 0}
        |> encode_ctecolcollations(msg)
        |> encode_ctecoltypmods(msg)
        |> encode_ctecoltypes(msg)
        |> encode_ctecolnames(msg)
        |> encode_cterefcount(msg)
        |> encode_cterecursive(msg)
        |> encode_location(msg)
        |> encode_cycle_clause(msg)
        |> encode_search_clause(msg)
        |> encode_ctequery(msg)
        |> encode_ctematerialized(msg)
        |> encode_aliascolnames(msg)
        |> encode_ctename(msg)
        |> encode_unknown_fields(msg)
      end
    )

    defp encode_ctecolcollations({acc, acc_size}, msg) do
      case msg.ctecolcollations do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "j" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:ctecolcollations, "invalid field value"), __STACKTRACE__
    end

    defp encode_ctecoltypmods({acc, acc_size}, msg) do
      case msg.ctecoltypmods do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "b" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:ctecoltypmods, "invalid field value"), __STACKTRACE__
    end

    defp encode_ctecoltypes({acc, acc_size}, msg) do
      case msg.ctecoltypes do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "Z" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:ctecoltypes, "invalid field value"), __STACKTRACE__
    end

    defp encode_ctecolnames({acc, acc_size}, msg) do
      case msg.ctecolnames do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "R" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:ctecolnames, "invalid field value"), __STACKTRACE__
    end

    defp encode_cterefcount({acc, acc_size}, msg) do
      if msg.cterefcount == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int32(msg.cterefcount)
        {["H", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:cterefcount, "invalid field value"), __STACKTRACE__
    end

    defp encode_cterecursive({acc, acc_size}, msg) do
      if msg.cterecursive == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.cterecursive)
        {["@", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:cterecursive, "invalid field value"), __STACKTRACE__
    end

    defp encode_location({acc, acc_size}, msg) do
      if msg.location == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int32(msg.location)
        {["8", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:location, "invalid field value"), __STACKTRACE__
    end

    defp encode_cycle_clause({acc, acc_size}, msg) do
      if msg.cycle_clause == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.cycle_clause)
        {["2", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:cycle_clause, "invalid field value"), __STACKTRACE__
    end

    defp encode_search_clause({acc, acc_size}, msg) do
      if msg.search_clause == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.search_clause)
        {["*", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:search_clause, "invalid field value"), __STACKTRACE__
    end

    defp encode_ctequery({acc, acc_size}, msg) do
      if msg.ctequery == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.ctequery)
        {["\"", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:ctequery, "invalid field value"), __STACKTRACE__
    end

    defp encode_ctematerialized({acc, acc_size}, msg) do
      if msg.ctematerialized == :CTEMATERIALIZE_UNDEFINED do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} =
          msg.ctematerialized |> PgQuery.CTEMaterialize.encode() |> Protox.Encode.encode_enum()

        {["\x18", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:ctematerialized, "invalid field value"), __STACKTRACE__
    end

    defp encode_aliascolnames({acc, acc_size}, msg) do
      case msg.aliascolnames do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "\x12" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:aliascolnames, "invalid field value"), __STACKTRACE__
    end

    defp encode_ctename({acc, acc_size}, msg) do
      if msg.ctename == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.ctename)
        {["\n", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:ctename, "invalid field value"), __STACKTRACE__
    end

    defp encode_unknown_fields({acc, acc_size}, msg) do
      Enum.reduce(msg.__uf__, {acc, acc_size}, fn {tag, wire_type, bytes}, {acc, acc_size} ->
        case wire_type do
          0 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :int32)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          1 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :double)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          2 ->
            {len_bytes, len_size} = bytes |> byte_size() |> Protox.Varint.encode()
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :packed)

            {[acc, <<key_bytes::binary, len_bytes::binary, bytes::binary>>],
             acc_size + key_size + len_size + byte_size(bytes)}

          5 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :float)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}
        end
      end)
    end
  )

  (
    (
      @spec decode(binary()) :: {:ok, t()} | {:error, any()}
      def decode(bytes) do
        {:ok, decode!(bytes)}
      rescue
        e in [Protox.DecodingError, Protox.IllegalTagError, Protox.RequiredFieldsError] ->
          {:error, e}
      end

      (
        @spec decode!(binary()) :: t() | no_return()
        def decode!(bytes) do
          parse_key_value(bytes, struct(PgQuery.CommonTableExpr))
        end
      )
    )

    (
      @spec parse_key_value(binary(), struct()) :: struct()
      defp parse_key_value(<<>>, msg) do
        msg
      end

      defp parse_key_value(bytes, msg) do
        {field, rest} =
          case bytes do
            <<_::5, 3::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 3")

            <<_::5, 4::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 4")

            <<_::5, 6::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 6")

            <<_::5, 7::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 7")

            <<0::5, _::3, _rest::binary>> ->
              raise %Protox.IllegalTagError{}

            <<13::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[ctecolcollations: msg.ctecolcollations ++ [PgQuery.Node.decode!(delimited)]],
               rest}

            <<12::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[ctecoltypmods: msg.ctecoltypmods ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<11::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[ctecoltypes: msg.ctecoltypes ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<10::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[ctecolnames: msg.ctecolnames ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<9::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int32(bytes)
              {[cterefcount: value], rest}

            <<8::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[cterecursive: value], rest}

            <<7::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int32(bytes)
              {[location: value], rest}

            <<6::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 cycle_clause:
                   Protox.MergeMessage.merge(
                     msg.cycle_clause,
                     PgQuery.CTECycleClause.decode!(delimited)
                   )
               ], rest}

            <<5::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 search_clause:
                   Protox.MergeMessage.merge(
                     msg.search_clause,
                     PgQuery.CTESearchClause.decode!(delimited)
                   )
               ], rest}

            <<4::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 ctequery:
                   Protox.MergeMessage.merge(msg.ctequery, PgQuery.Node.decode!(delimited))
               ], rest}

            <<3::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_enum(bytes, PgQuery.CTEMaterialize)
              {[ctematerialized: value], rest}

            <<2::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[aliascolnames: msg.aliascolnames ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<1::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[ctename: Protox.Decode.validate_string!(delimited)], rest}

            <<bytes::binary>> ->
              {tag, wire_type, rest} = Protox.Decode.parse_key(bytes)
              {value, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {[__uf__: msg.__uf__ ++ [value]], rest}
          end

        msg_updated = struct(msg, field)
        parse_key_value(rest, msg_updated)
      end
    )
  )

  (
    @spec unknown_fields(struct()) :: [{non_neg_integer(), Protox.Types.tag(), binary()}]
    def unknown_fields(msg) do
      msg.__uf__
    end

    @spec unknown_fields_name() :: :__uf__
    def unknown_fields_name() do
      :__uf__
    end

    @spec clear_unknown_fields(struct) :: struct
    def clear_unknown_fields(msg) do
      struct!(msg, __uf__: [])
    end
  )

  (
    @spec default(atom()) ::
            {:ok, boolean() | integer() | String.t() | float()}
            | {:error, :no_such_field | :no_default_value}
    def default(:ctecolcollations) do
      {:error, :no_default_value}
    end

    def default(:ctecoltypmods) do
      {:error, :no_default_value}
    end

    def default(:ctecoltypes) do
      {:error, :no_default_value}
    end

    def default(:ctecolnames) do
      {:error, :no_default_value}
    end

    def default(:cterefcount) do
      {:ok, 0}
    end

    def default(:cterecursive) do
      {:ok, false}
    end

    def default(:location) do
      {:ok, 0}
    end

    def default(:cycle_clause) do
      {:ok, nil}
    end

    def default(:search_clause) do
      {:ok, nil}
    end

    def default(:ctequery) do
      {:ok, nil}
    end

    def default(:ctematerialized) do
      {:ok, :CTEMATERIALIZE_UNDEFINED}
    end

    def default(:aliascolnames) do
      {:error, :no_default_value}
    end

    def default(:ctename) do
      {:ok, ""}
    end

    def default(_) do
      {:error, :no_such_field}
    end
  )

  @spec schema() :: Protox.MessageSchema.t()
  def schema() do
    %{
      __struct__: Protox.MessageSchema,
      fields: %{
        aliascolnames: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :aliascolnames,
          tag: 2,
          type: {:message, PgQuery.Node}
        },
        ctecolcollations: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :ctecolcollations,
          tag: 13,
          type: {:message, PgQuery.Node}
        },
        ctecolnames: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :ctecolnames,
          tag: 10,
          type: {:message, PgQuery.Node}
        },
        ctecoltypes: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :ctecoltypes,
          tag: 11,
          type: {:message, PgQuery.Node}
        },
        ctecoltypmods: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :ctecoltypmods,
          tag: 12,
          type: {:message, PgQuery.Node}
        },
        ctematerialized: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: :CTEMATERIALIZE_UNDEFINED},
          label: :optional,
          name: :ctematerialized,
          tag: 3,
          type: {:enum, PgQuery.CTEMaterialize}
        },
        ctename: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :ctename,
          tag: 1,
          type: :string
        },
        ctequery: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :ctequery,
          tag: 4,
          type: {:message, PgQuery.Node}
        },
        cterecursive: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :cterecursive,
          tag: 8,
          type: :bool
        },
        cterefcount: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :cterefcount,
          tag: 9,
          type: :int32
        },
        cycle_clause: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :cycle_clause,
          tag: 6,
          type: {:message, PgQuery.CTECycleClause}
        },
        location: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :location,
          tag: 7,
          type: :int32
        },
        search_clause: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :search_clause,
          tag: 5,
          type: {:message, PgQuery.CTESearchClause}
        }
      },
      file_options: nil,
      name: PgQuery.CommonTableExpr,
      syntax: :proto3
    }
  end
end
