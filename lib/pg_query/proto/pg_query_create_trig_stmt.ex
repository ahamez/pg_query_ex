# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule PgQuery.CreateTrigStmt do
  @moduledoc false
  if function_exported?(Protox, :check_generator_version, 1) do
    Protox.check_generator_version(1)
  else
    raise "This code was generated with protox 2 but the runtime is using an older version of protox."
  end

  @type t :: %__MODULE__{
          constrrel: PgQuery.RangeVar.t() | nil,
          initdeferred: boolean(),
          deferrable: boolean(),
          transition_rels: [PgQuery.Node.t()],
          when_clause: PgQuery.Node.t() | nil,
          columns: [PgQuery.Node.t()],
          events: integer(),
          timing: integer(),
          row: boolean(),
          args: [PgQuery.Node.t()],
          funcname: [PgQuery.Node.t()],
          relation: PgQuery.RangeVar.t() | nil,
          trigname: String.t(),
          isconstraint: boolean(),
          replace: boolean(),
          __uf__: [{non_neg_integer(), Protox.Types.tag(), binary()}]
        }
  defstruct constrrel: nil,
            initdeferred: false,
            deferrable: false,
            transition_rels: [],
            when_clause: nil,
            columns: [],
            events: 0,
            timing: 0,
            row: false,
            args: [],
            funcname: [],
            relation: nil,
            trigname: "",
            isconstraint: false,
            replace: false,
            __uf__: []

  (
    (
      @spec encode(t()) :: {:ok, iodata(), non_neg_integer()} | {:error, any()}
      def encode(msg) do
        msg |> encode!() |> Tuple.insert_at(0, :ok)
      rescue
        e in [Protox.EncodingError, Protox.RequiredFieldsError] -> {:error, e}
      end

      @spec encode!(t()) :: {iodata(), non_neg_integer()} | no_return()
      def encode!(msg) do
        {_acc = [], _acc_size = 0}
        |> encode_constrrel(msg)
        |> encode_initdeferred(msg)
        |> encode_deferrable(msg)
        |> encode_transition_rels(msg)
        |> encode_when_clause(msg)
        |> encode_columns(msg)
        |> encode_events(msg)
        |> encode_timing(msg)
        |> encode_row(msg)
        |> encode_args(msg)
        |> encode_funcname(msg)
        |> encode_relation(msg)
        |> encode_trigname(msg)
        |> encode_isconstraint(msg)
        |> encode_replace(msg)
        |> encode_unknown_fields(msg)
      end
    )

    defp encode_constrrel({acc, acc_size}, msg) do
      if msg.constrrel == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.constrrel)
        {["z", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:constrrel, "invalid field value"), __STACKTRACE__
    end

    defp encode_initdeferred({acc, acc_size}, msg) do
      if msg.initdeferred == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.initdeferred)
        {["p", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:initdeferred, "invalid field value"), __STACKTRACE__
    end

    defp encode_deferrable({acc, acc_size}, msg) do
      if msg.deferrable == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.deferrable)
        {["h", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:deferrable, "invalid field value"), __STACKTRACE__
    end

    defp encode_transition_rels({acc, acc_size}, msg) do
      case msg.transition_rels do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "b" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:transition_rels, "invalid field value"), __STACKTRACE__
    end

    defp encode_when_clause({acc, acc_size}, msg) do
      if msg.when_clause == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.when_clause)
        {["Z", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:when_clause, "invalid field value"), __STACKTRACE__
    end

    defp encode_columns({acc, acc_size}, msg) do
      case msg.columns do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "R" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:columns, "invalid field value"), __STACKTRACE__
    end

    defp encode_events({acc, acc_size}, msg) do
      if msg.events == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int32(msg.events)
        {["H", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:events, "invalid field value"), __STACKTRACE__
    end

    defp encode_timing({acc, acc_size}, msg) do
      if msg.timing == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int32(msg.timing)
        {["@", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:timing, "invalid field value"), __STACKTRACE__
    end

    defp encode_row({acc, acc_size}, msg) do
      if msg.row == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.row)
        {["8", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:row, "invalid field value"), __STACKTRACE__
    end

    defp encode_args({acc, acc_size}, msg) do
      case msg.args do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "2" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:args, "invalid field value"), __STACKTRACE__
    end

    defp encode_funcname({acc, acc_size}, msg) do
      case msg.funcname do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "*" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:funcname, "invalid field value"), __STACKTRACE__
    end

    defp encode_relation({acc, acc_size}, msg) do
      if msg.relation == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.relation)
        {["\"", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:relation, "invalid field value"), __STACKTRACE__
    end

    defp encode_trigname({acc, acc_size}, msg) do
      if msg.trigname == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.trigname)
        {["\x1A", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:trigname, "invalid field value"), __STACKTRACE__
    end

    defp encode_isconstraint({acc, acc_size}, msg) do
      if msg.isconstraint == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.isconstraint)
        {["\x10", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:isconstraint, "invalid field value"), __STACKTRACE__
    end

    defp encode_replace({acc, acc_size}, msg) do
      if msg.replace == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.replace)
        {["\b", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:replace, "invalid field value"), __STACKTRACE__
    end

    defp encode_unknown_fields({acc, acc_size}, msg) do
      Enum.reduce(msg.__uf__, {acc, acc_size}, fn {tag, wire_type, bytes}, {acc, acc_size} ->
        case wire_type do
          0 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :int32)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          1 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :double)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          2 ->
            {len_bytes, len_size} = bytes |> byte_size() |> Protox.Varint.encode()
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :packed)

            {[acc, <<key_bytes::binary, len_bytes::binary, bytes::binary>>],
             acc_size + key_size + len_size + byte_size(bytes)}

          5 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :float)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}
        end
      end)
    end
  )

  (
    (
      @spec decode(binary()) :: {:ok, t()} | {:error, any()}
      def decode(bytes) do
        {:ok, decode!(bytes)}
      rescue
        e in [Protox.DecodingError, Protox.IllegalTagError, Protox.RequiredFieldsError] ->
          {:error, e}
      end

      (
        @spec decode!(binary()) :: t() | no_return()
        def decode!(bytes) do
          parse_key_value(bytes, struct(PgQuery.CreateTrigStmt))
        end
      )
    )

    (
      @spec parse_key_value(binary(), struct()) :: struct()
      defp parse_key_value(<<>>, msg) do
        msg
      end

      defp parse_key_value(bytes, msg) do
        {field, rest} =
          case bytes do
            <<_::5, 3::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 3")

            <<_::5, 4::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 4")

            <<_::5, 6::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 6")

            <<_::5, 7::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 7")

            <<0::5, _::3, _rest::binary>> ->
              raise %Protox.IllegalTagError{}

            <<15::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 constrrel:
                   Protox.MergeMessage.merge(msg.constrrel, PgQuery.RangeVar.decode!(delimited))
               ], rest}

            <<14::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[initdeferred: value], rest}

            <<13::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[deferrable: value], rest}

            <<12::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[transition_rels: msg.transition_rels ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<11::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 when_clause:
                   Protox.MergeMessage.merge(msg.when_clause, PgQuery.Node.decode!(delimited))
               ], rest}

            <<10::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[columns: msg.columns ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<9::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int32(bytes)
              {[events: value], rest}

            <<8::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int32(bytes)
              {[timing: value], rest}

            <<7::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[row: value], rest}

            <<6::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[args: msg.args ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<5::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[funcname: msg.funcname ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<4::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 relation:
                   Protox.MergeMessage.merge(msg.relation, PgQuery.RangeVar.decode!(delimited))
               ], rest}

            <<3::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[trigname: Protox.Decode.validate_string!(delimited)], rest}

            <<2::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[isconstraint: value], rest}

            <<1::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[replace: value], rest}

            <<bytes::binary>> ->
              {tag, wire_type, rest} = Protox.Decode.parse_key(bytes)
              {value, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {[__uf__: msg.__uf__ ++ [value]], rest}
          end

        msg_updated = struct(msg, field)
        parse_key_value(rest, msg_updated)
      end
    )
  )

  (
    @spec unknown_fields(struct()) :: [{non_neg_integer(), Protox.Types.tag(), binary()}]
    def unknown_fields(msg) do
      msg.__uf__
    end

    @spec unknown_fields_name() :: :__uf__
    def unknown_fields_name() do
      :__uf__
    end

    @spec clear_unknown_fields(struct) :: struct
    def clear_unknown_fields(msg) do
      struct!(msg, __uf__: [])
    end
  )

  (
    @spec default(atom()) ::
            {:ok, boolean() | integer() | String.t() | float()}
            | {:error, :no_such_field | :no_default_value}
    def default(:constrrel) do
      {:ok, nil}
    end

    def default(:initdeferred) do
      {:ok, false}
    end

    def default(:deferrable) do
      {:ok, false}
    end

    def default(:transition_rels) do
      {:error, :no_default_value}
    end

    def default(:when_clause) do
      {:ok, nil}
    end

    def default(:columns) do
      {:error, :no_default_value}
    end

    def default(:events) do
      {:ok, 0}
    end

    def default(:timing) do
      {:ok, 0}
    end

    def default(:row) do
      {:ok, false}
    end

    def default(:args) do
      {:error, :no_default_value}
    end

    def default(:funcname) do
      {:error, :no_default_value}
    end

    def default(:relation) do
      {:ok, nil}
    end

    def default(:trigname) do
      {:ok, ""}
    end

    def default(:isconstraint) do
      {:ok, false}
    end

    def default(:replace) do
      {:ok, false}
    end

    def default(_) do
      {:error, :no_such_field}
    end
  )

  @spec schema() :: Protox.MessageSchema.t()
  def schema() do
    %{
      __struct__: Protox.MessageSchema,
      fields: %{
        args: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :args,
          tag: 6,
          type: {:message, PgQuery.Node}
        },
        columns: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :columns,
          tag: 10,
          type: {:message, PgQuery.Node}
        },
        constrrel: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :constrrel,
          tag: 15,
          type: {:message, PgQuery.RangeVar}
        },
        deferrable: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :deferrable,
          tag: 13,
          type: :bool
        },
        events: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :events,
          tag: 9,
          type: :int32
        },
        funcname: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :funcname,
          tag: 5,
          type: {:message, PgQuery.Node}
        },
        initdeferred: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :initdeferred,
          tag: 14,
          type: :bool
        },
        isconstraint: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :isconstraint,
          tag: 2,
          type: :bool
        },
        relation: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :relation,
          tag: 4,
          type: {:message, PgQuery.RangeVar}
        },
        replace: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :replace,
          tag: 1,
          type: :bool
        },
        row: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :row,
          tag: 7,
          type: :bool
        },
        timing: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :timing,
          tag: 8,
          type: :int32
        },
        transition_rels: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :transition_rels,
          tag: 12,
          type: {:message, PgQuery.Node}
        },
        trigname: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :trigname,
          tag: 3,
          type: :string
        },
        when_clause: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :when_clause,
          tag: 11,
          type: {:message, PgQuery.Node}
        }
      },
      file_options: nil,
      name: PgQuery.CreateTrigStmt,
      syntax: :proto3
    }
  end
end
