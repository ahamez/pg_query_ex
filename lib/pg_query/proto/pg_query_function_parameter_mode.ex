# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule PgQuery.FunctionParameterMode do
  @moduledoc false
  @type t :: %__MODULE__{}
  defstruct []

  (
    @spec default() :: :FUNCTION_PARAMETER_MODE_UNDEFINED
    def default() do
      :FUNCTION_PARAMETER_MODE_UNDEFINED
    end
  )

  @spec encode(atom() | String.t()) :: integer() | atom()
  def encode(:FUNCTION_PARAMETER_MODE_UNDEFINED) do
    0
  end

  def encode(:FUNC_PARAM_IN) do
    1
  end

  def encode(:FUNC_PARAM_OUT) do
    2
  end

  def encode(:FUNC_PARAM_INOUT) do
    3
  end

  def encode(:FUNC_PARAM_VARIADIC) do
    4
  end

  def encode(:FUNC_PARAM_TABLE) do
    5
  end

  def encode(:FUNC_PARAM_DEFAULT) do
    6
  end

  def encode(x) do
    x
  end

  @spec decode(integer()) :: atom() | integer()
  def decode(0) do
    :FUNCTION_PARAMETER_MODE_UNDEFINED
  end

  def decode(1) do
    :FUNC_PARAM_IN
  end

  def decode(2) do
    :FUNC_PARAM_OUT
  end

  def decode(3) do
    :FUNC_PARAM_INOUT
  end

  def decode(4) do
    :FUNC_PARAM_VARIADIC
  end

  def decode(5) do
    :FUNC_PARAM_TABLE
  end

  def decode(6) do
    :FUNC_PARAM_DEFAULT
  end

  def decode(x) do
    x
  end

  @spec constants() :: [{integer(), atom()}]
  def constants() do
    [
      {0, :FUNCTION_PARAMETER_MODE_UNDEFINED},
      {1, :FUNC_PARAM_IN},
      {2, :FUNC_PARAM_OUT},
      {3, :FUNC_PARAM_INOUT},
      {4, :FUNC_PARAM_VARIADIC},
      {5, :FUNC_PARAM_TABLE},
      {6, :FUNC_PARAM_DEFAULT}
    ]
  end

  @spec has_constant?(any()) :: boolean()
  (
    def has_constant?(:FUNCTION_PARAMETER_MODE_UNDEFINED) do
      true
    end

    def has_constant?(:FUNC_PARAM_IN) do
      true
    end

    def has_constant?(:FUNC_PARAM_OUT) do
      true
    end

    def has_constant?(:FUNC_PARAM_INOUT) do
      true
    end

    def has_constant?(:FUNC_PARAM_VARIADIC) do
      true
    end

    def has_constant?(:FUNC_PARAM_TABLE) do
      true
    end

    def has_constant?(:FUNC_PARAM_DEFAULT) do
      true
    end

    def has_constant?(_) do
      false
    end
  )
end
