# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule PgQuery.Aggref do
  @moduledoc false
  if function_exported?(Protox, :check_generator_version, 1) do
    Protox.check_generator_version(1)
  else
    raise "This code was generated with protox 2 but the runtime is using an older version of protox."
  end

  @type t :: %__MODULE__{
          location: integer(),
          aggtransno: integer(),
          aggno: integer(),
          aggsplit: atom(),
          agglevelsup: non_neg_integer(),
          aggkind: String.t(),
          aggvariadic: boolean(),
          aggstar: boolean(),
          aggfilter: PgQuery.Node.t() | nil,
          aggdistinct: [PgQuery.Node.t()],
          aggorder: [PgQuery.Node.t()],
          args: [PgQuery.Node.t()],
          aggdirectargs: [PgQuery.Node.t()],
          aggargtypes: [PgQuery.Node.t()],
          aggtranstype: non_neg_integer(),
          inputcollid: non_neg_integer(),
          aggcollid: non_neg_integer(),
          aggtype: non_neg_integer(),
          aggfnoid: non_neg_integer(),
          xpr: PgQuery.Node.t() | nil,
          __uf__: [{non_neg_integer(), Protox.Types.tag(), binary()}]
        }
  defstruct location: 0,
            aggtransno: 0,
            aggno: 0,
            aggsplit: :AGG_SPLIT_UNDEFINED,
            agglevelsup: 0,
            aggkind: "",
            aggvariadic: false,
            aggstar: false,
            aggfilter: nil,
            aggdistinct: [],
            aggorder: [],
            args: [],
            aggdirectargs: [],
            aggargtypes: [],
            aggtranstype: 0,
            inputcollid: 0,
            aggcollid: 0,
            aggtype: 0,
            aggfnoid: 0,
            xpr: nil,
            __uf__: []

  (
    (
      @spec encode(t()) :: {:ok, iodata(), non_neg_integer()} | {:error, any()}
      def encode(msg) do
        msg |> encode!() |> Tuple.insert_at(0, :ok)
      rescue
        e in [Protox.EncodingError, Protox.RequiredFieldsError] -> {:error, e}
      end

      @spec encode!(t()) :: {iodata(), non_neg_integer()} | no_return()
      def encode!(msg) do
        {_acc = [], _acc_size = 0}
        |> encode_location(msg)
        |> encode_aggtransno(msg)
        |> encode_aggno(msg)
        |> encode_aggsplit(msg)
        |> encode_agglevelsup(msg)
        |> encode_aggkind(msg)
        |> encode_aggvariadic(msg)
        |> encode_aggstar(msg)
        |> encode_aggfilter(msg)
        |> encode_aggdistinct(msg)
        |> encode_aggorder(msg)
        |> encode_args(msg)
        |> encode_aggdirectargs(msg)
        |> encode_aggargtypes(msg)
        |> encode_aggtranstype(msg)
        |> encode_inputcollid(msg)
        |> encode_aggcollid(msg)
        |> encode_aggtype(msg)
        |> encode_aggfnoid(msg)
        |> encode_xpr(msg)
        |> encode_unknown_fields(msg)
      end
    )

    defp encode_location({acc, acc_size}, msg) do
      if msg.location == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int32(msg.location)
        {["\xA0\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:location, "invalid field value"), __STACKTRACE__
    end

    defp encode_aggtransno({acc, acc_size}, msg) do
      if msg.aggtransno == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int32(msg.aggtransno)
        {["\x98\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:aggtransno, "invalid field value"), __STACKTRACE__
    end

    defp encode_aggno({acc, acc_size}, msg) do
      if msg.aggno == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int32(msg.aggno)
        {["\x90\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:aggno, "invalid field value"), __STACKTRACE__
    end

    defp encode_aggsplit({acc, acc_size}, msg) do
      if msg.aggsplit == :AGG_SPLIT_UNDEFINED do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} =
          msg.aggsplit |> PgQuery.AggSplit.encode() |> Protox.Encode.encode_enum()

        {["\x88\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:aggsplit, "invalid field value"), __STACKTRACE__
    end

    defp encode_agglevelsup({acc, acc_size}, msg) do
      if msg.agglevelsup == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.agglevelsup)
        {["\x80\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:agglevelsup, "invalid field value"), __STACKTRACE__
    end

    defp encode_aggkind({acc, acc_size}, msg) do
      if msg.aggkind == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.aggkind)
        {["z", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:aggkind, "invalid field value"), __STACKTRACE__
    end

    defp encode_aggvariadic({acc, acc_size}, msg) do
      if msg.aggvariadic == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.aggvariadic)
        {["p", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:aggvariadic, "invalid field value"), __STACKTRACE__
    end

    defp encode_aggstar({acc, acc_size}, msg) do
      if msg.aggstar == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.aggstar)
        {["h", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:aggstar, "invalid field value"), __STACKTRACE__
    end

    defp encode_aggfilter({acc, acc_size}, msg) do
      if msg.aggfilter == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.aggfilter)
        {["b", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:aggfilter, "invalid field value"), __STACKTRACE__
    end

    defp encode_aggdistinct({acc, acc_size}, msg) do
      case msg.aggdistinct do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "Z" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:aggdistinct, "invalid field value"), __STACKTRACE__
    end

    defp encode_aggorder({acc, acc_size}, msg) do
      case msg.aggorder do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "R" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:aggorder, "invalid field value"), __STACKTRACE__
    end

    defp encode_args({acc, acc_size}, msg) do
      case msg.args do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "J" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:args, "invalid field value"), __STACKTRACE__
    end

    defp encode_aggdirectargs({acc, acc_size}, msg) do
      case msg.aggdirectargs do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "B" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:aggdirectargs, "invalid field value"), __STACKTRACE__
    end

    defp encode_aggargtypes({acc, acc_size}, msg) do
      case msg.aggargtypes do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, ":" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:aggargtypes, "invalid field value"), __STACKTRACE__
    end

    defp encode_aggtranstype({acc, acc_size}, msg) do
      if msg.aggtranstype == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.aggtranstype)
        {["0", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:aggtranstype, "invalid field value"), __STACKTRACE__
    end

    defp encode_inputcollid({acc, acc_size}, msg) do
      if msg.inputcollid == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.inputcollid)
        {["(", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:inputcollid, "invalid field value"), __STACKTRACE__
    end

    defp encode_aggcollid({acc, acc_size}, msg) do
      if msg.aggcollid == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.aggcollid)
        {[" ", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:aggcollid, "invalid field value"), __STACKTRACE__
    end

    defp encode_aggtype({acc, acc_size}, msg) do
      if msg.aggtype == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.aggtype)
        {["\x18", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:aggtype, "invalid field value"), __STACKTRACE__
    end

    defp encode_aggfnoid({acc, acc_size}, msg) do
      if msg.aggfnoid == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.aggfnoid)
        {["\x10", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:aggfnoid, "invalid field value"), __STACKTRACE__
    end

    defp encode_xpr({acc, acc_size}, msg) do
      if msg.xpr == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.xpr)
        {["\n", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:xpr, "invalid field value"), __STACKTRACE__
    end

    defp encode_unknown_fields({acc, acc_size}, msg) do
      Enum.reduce(msg.__uf__, {acc, acc_size}, fn {tag, wire_type, bytes}, {acc, acc_size} ->
        case wire_type do
          0 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :int32)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          1 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :double)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          2 ->
            {len_bytes, len_size} = bytes |> byte_size() |> Protox.Varint.encode()
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :packed)

            {[acc, <<key_bytes::binary, len_bytes::binary, bytes::binary>>],
             acc_size + key_size + len_size + byte_size(bytes)}

          5 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :float)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}
        end
      end)
    end
  )

  (
    (
      @spec decode(binary()) :: {:ok, t()} | {:error, any()}
      def decode(bytes) do
        {:ok, decode!(bytes)}
      rescue
        e in [Protox.DecodingError, Protox.IllegalTagError, Protox.RequiredFieldsError] ->
          {:error, e}
      end

      (
        @spec decode!(binary()) :: t() | no_return()
        def decode!(bytes) do
          parse_key_value(bytes, struct(PgQuery.Aggref))
        end
      )
    )

    (
      @spec parse_key_value(binary(), struct()) :: struct()
      defp parse_key_value(<<>>, msg) do
        msg
      end

      defp parse_key_value(bytes, msg) do
        {field, rest} =
          case bytes do
            <<_::5, 3::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 3")

            <<_::5, 4::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 4")

            <<_::5, 6::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 6")

            <<_::5, 7::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 7")

            <<0::5, _::3, _rest::binary>> ->
              raise %Protox.IllegalTagError{}

            <<20::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int32(bytes)
              {[location: value], rest}

            <<19::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int32(bytes)
              {[aggtransno: value], rest}

            <<18::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int32(bytes)
              {[aggno: value], rest}

            <<17::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_enum(bytes, PgQuery.AggSplit)
              {[aggsplit: value], rest}

            <<16::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[agglevelsup: value], rest}

            <<15::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[aggkind: Protox.Decode.validate_string!(delimited)], rest}

            <<14::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[aggvariadic: value], rest}

            <<13::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[aggstar: value], rest}

            <<12::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 aggfilter:
                   Protox.MergeMessage.merge(msg.aggfilter, PgQuery.Node.decode!(delimited))
               ], rest}

            <<11::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[aggdistinct: msg.aggdistinct ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<10::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[aggorder: msg.aggorder ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<9::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[args: msg.args ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<8::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[aggdirectargs: msg.aggdirectargs ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<7::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[aggargtypes: msg.aggargtypes ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<6::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[aggtranstype: value], rest}

            <<5::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[inputcollid: value], rest}

            <<4::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[aggcollid: value], rest}

            <<3::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[aggtype: value], rest}

            <<2::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[aggfnoid: value], rest}

            <<1::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[xpr: Protox.MergeMessage.merge(msg.xpr, PgQuery.Node.decode!(delimited))], rest}

            <<bytes::binary>> ->
              {tag, wire_type, rest} = Protox.Decode.parse_key(bytes)
              {value, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {[__uf__: msg.__uf__ ++ [value]], rest}
          end

        msg_updated = struct(msg, field)
        parse_key_value(rest, msg_updated)
      end
    )
  )

  (
    @spec unknown_fields(struct()) :: [{non_neg_integer(), Protox.Types.tag(), binary()}]
    def unknown_fields(msg) do
      msg.__uf__
    end

    @spec unknown_fields_name() :: :__uf__
    def unknown_fields_name() do
      :__uf__
    end

    @spec clear_unknown_fields(struct) :: struct
    def clear_unknown_fields(msg) do
      struct!(msg, __uf__: [])
    end
  )

  (
    @spec default(atom()) ::
            {:ok, boolean() | integer() | String.t() | float()}
            | {:error, :no_such_field | :no_default_value}
    def default(:location) do
      {:ok, 0}
    end

    def default(:aggtransno) do
      {:ok, 0}
    end

    def default(:aggno) do
      {:ok, 0}
    end

    def default(:aggsplit) do
      {:ok, :AGG_SPLIT_UNDEFINED}
    end

    def default(:agglevelsup) do
      {:ok, 0}
    end

    def default(:aggkind) do
      {:ok, ""}
    end

    def default(:aggvariadic) do
      {:ok, false}
    end

    def default(:aggstar) do
      {:ok, false}
    end

    def default(:aggfilter) do
      {:ok, nil}
    end

    def default(:aggdistinct) do
      {:error, :no_default_value}
    end

    def default(:aggorder) do
      {:error, :no_default_value}
    end

    def default(:args) do
      {:error, :no_default_value}
    end

    def default(:aggdirectargs) do
      {:error, :no_default_value}
    end

    def default(:aggargtypes) do
      {:error, :no_default_value}
    end

    def default(:aggtranstype) do
      {:ok, 0}
    end

    def default(:inputcollid) do
      {:ok, 0}
    end

    def default(:aggcollid) do
      {:ok, 0}
    end

    def default(:aggtype) do
      {:ok, 0}
    end

    def default(:aggfnoid) do
      {:ok, 0}
    end

    def default(:xpr) do
      {:ok, nil}
    end

    def default(_) do
      {:error, :no_such_field}
    end
  )

  @spec schema() :: Protox.MessageSchema.t()
  def schema() do
    %{
      __struct__: Protox.MessageSchema,
      fields: %{
        aggargtypes: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :aggargtypes,
          tag: 7,
          type: {:message, PgQuery.Node}
        },
        aggcollid: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :aggcollid,
          tag: 4,
          type: :uint32
        },
        aggdirectargs: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :aggdirectargs,
          tag: 8,
          type: {:message, PgQuery.Node}
        },
        aggdistinct: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :aggdistinct,
          tag: 11,
          type: {:message, PgQuery.Node}
        },
        aggfilter: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :aggfilter,
          tag: 12,
          type: {:message, PgQuery.Node}
        },
        aggfnoid: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :aggfnoid,
          tag: 2,
          type: :uint32
        },
        aggkind: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :aggkind,
          tag: 15,
          type: :string
        },
        agglevelsup: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :agglevelsup,
          tag: 16,
          type: :uint32
        },
        aggno: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :aggno,
          tag: 18,
          type: :int32
        },
        aggorder: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :aggorder,
          tag: 10,
          type: {:message, PgQuery.Node}
        },
        aggsplit: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: :AGG_SPLIT_UNDEFINED},
          label: :optional,
          name: :aggsplit,
          tag: 17,
          type: {:enum, PgQuery.AggSplit}
        },
        aggstar: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :aggstar,
          tag: 13,
          type: :bool
        },
        aggtransno: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :aggtransno,
          tag: 19,
          type: :int32
        },
        aggtranstype: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :aggtranstype,
          tag: 6,
          type: :uint32
        },
        aggtype: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :aggtype,
          tag: 3,
          type: :uint32
        },
        aggvariadic: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :aggvariadic,
          tag: 14,
          type: :bool
        },
        args: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :args,
          tag: 9,
          type: {:message, PgQuery.Node}
        },
        inputcollid: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :inputcollid,
          tag: 5,
          type: :uint32
        },
        location: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :location,
          tag: 20,
          type: :int32
        },
        xpr: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :xpr,
          tag: 1,
          type: {:message, PgQuery.Node}
        }
      },
      file_options: nil,
      name: PgQuery.Aggref,
      syntax: :proto3
    }
  end
end
