# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule PgQuery.A_Expr_Kind do
  @moduledoc false
  @type t :: %__MODULE__{}
  defstruct []

  (
    @spec default() :: :A_EXPR_KIND_UNDEFINED
    def default() do
      :A_EXPR_KIND_UNDEFINED
    end
  )

  @spec encode(atom() | String.t()) :: integer() | atom()
  def encode(:A_EXPR_KIND_UNDEFINED) do
    0
  end

  def encode(:AEXPR_OP) do
    1
  end

  def encode(:AEXPR_OP_ANY) do
    2
  end

  def encode(:AEXPR_OP_ALL) do
    3
  end

  def encode(:AEXPR_DISTINCT) do
    4
  end

  def encode(:AEXPR_NOT_DISTINCT) do
    5
  end

  def encode(:AEXPR_NULLIF) do
    6
  end

  def encode(:AEXPR_IN) do
    7
  end

  def encode(:AEXPR_LIKE) do
    8
  end

  def encode(:AEXPR_ILIKE) do
    9
  end

  def encode(:AEXPR_SIMILAR) do
    10
  end

  def encode(:AEXPR_BETWEEN) do
    11
  end

  def encode(:AEXPR_NOT_BETWEEN) do
    12
  end

  def encode(:AEXPR_BETWEEN_SYM) do
    13
  end

  def encode(:AEXPR_NOT_BETWEEN_SYM) do
    14
  end

  def encode(x) do
    x
  end

  @spec decode(integer()) :: atom() | integer()
  def decode(0) do
    :A_EXPR_KIND_UNDEFINED
  end

  def decode(1) do
    :AEXPR_OP
  end

  def decode(2) do
    :AEXPR_OP_ANY
  end

  def decode(3) do
    :AEXPR_OP_ALL
  end

  def decode(4) do
    :AEXPR_DISTINCT
  end

  def decode(5) do
    :AEXPR_NOT_DISTINCT
  end

  def decode(6) do
    :AEXPR_NULLIF
  end

  def decode(7) do
    :AEXPR_IN
  end

  def decode(8) do
    :AEXPR_LIKE
  end

  def decode(9) do
    :AEXPR_ILIKE
  end

  def decode(10) do
    :AEXPR_SIMILAR
  end

  def decode(11) do
    :AEXPR_BETWEEN
  end

  def decode(12) do
    :AEXPR_NOT_BETWEEN
  end

  def decode(13) do
    :AEXPR_BETWEEN_SYM
  end

  def decode(14) do
    :AEXPR_NOT_BETWEEN_SYM
  end

  def decode(x) do
    x
  end

  @spec constants() :: [{integer(), atom()}]
  def constants() do
    [
      {0, :A_EXPR_KIND_UNDEFINED},
      {1, :AEXPR_OP},
      {2, :AEXPR_OP_ANY},
      {3, :AEXPR_OP_ALL},
      {4, :AEXPR_DISTINCT},
      {5, :AEXPR_NOT_DISTINCT},
      {6, :AEXPR_NULLIF},
      {7, :AEXPR_IN},
      {8, :AEXPR_LIKE},
      {9, :AEXPR_ILIKE},
      {10, :AEXPR_SIMILAR},
      {11, :AEXPR_BETWEEN},
      {12, :AEXPR_NOT_BETWEEN},
      {13, :AEXPR_BETWEEN_SYM},
      {14, :AEXPR_NOT_BETWEEN_SYM}
    ]
  end

  @spec has_constant?(any()) :: boolean()
  (
    def has_constant?(:A_EXPR_KIND_UNDEFINED) do
      true
    end

    def has_constant?(:AEXPR_OP) do
      true
    end

    def has_constant?(:AEXPR_OP_ANY) do
      true
    end

    def has_constant?(:AEXPR_OP_ALL) do
      true
    end

    def has_constant?(:AEXPR_DISTINCT) do
      true
    end

    def has_constant?(:AEXPR_NOT_DISTINCT) do
      true
    end

    def has_constant?(:AEXPR_NULLIF) do
      true
    end

    def has_constant?(:AEXPR_IN) do
      true
    end

    def has_constant?(:AEXPR_LIKE) do
      true
    end

    def has_constant?(:AEXPR_ILIKE) do
      true
    end

    def has_constant?(:AEXPR_SIMILAR) do
      true
    end

    def has_constant?(:AEXPR_BETWEEN) do
      true
    end

    def has_constant?(:AEXPR_NOT_BETWEEN) do
      true
    end

    def has_constant?(:AEXPR_BETWEEN_SYM) do
      true
    end

    def has_constant?(:AEXPR_NOT_BETWEEN_SYM) do
      true
    end

    def has_constant?(_) do
      false
    end
  )
end
