# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule PgQuery.RangeTblEntry do
  @moduledoc false
  if function_exported?(Protox, :check_generator_version, 1) do
    Protox.check_generator_version(1)
  else
    raise "This code was generated with protox 2 but the runtime is using an older version of protox."
  end

  @type t :: %__MODULE__{
          security_quals: [PgQuery.Node.t()],
          extra_updated_cols: [non_neg_integer()],
          updated_cols: [non_neg_integer()],
          inserted_cols: [non_neg_integer()],
          selected_cols: [non_neg_integer()],
          check_as_user: non_neg_integer(),
          required_perms: non_neg_integer(),
          in_from_cl: boolean(),
          inh: boolean(),
          lateral: boolean(),
          eref: PgQuery.Alias.t() | nil,
          alias: PgQuery.Alias.t() | nil,
          enrtuples: float(),
          enrname: String.t(),
          colcollations: [PgQuery.Node.t()],
          coltypmods: [PgQuery.Node.t()],
          coltypes: [PgQuery.Node.t()],
          self_reference: boolean(),
          ctelevelsup: non_neg_integer(),
          ctename: String.t(),
          values_lists: [PgQuery.Node.t()],
          tablefunc: PgQuery.TableFunc.t() | nil,
          funcordinality: boolean(),
          functions: [PgQuery.Node.t()],
          join_using_alias: PgQuery.Alias.t() | nil,
          joinrightcols: [PgQuery.Node.t()],
          joinleftcols: [PgQuery.Node.t()],
          joinaliasvars: [PgQuery.Node.t()],
          joinmergedcols: integer(),
          jointype: atom(),
          security_barrier: boolean(),
          subquery: PgQuery.Query.t() | nil,
          tablesample: PgQuery.TableSampleClause.t() | nil,
          rellockmode: integer(),
          relkind: String.t(),
          relid: non_neg_integer(),
          rtekind: atom(),
          __uf__: [{non_neg_integer(), Protox.Types.tag(), binary()}]
        }
  defstruct security_quals: [],
            extra_updated_cols: [],
            updated_cols: [],
            inserted_cols: [],
            selected_cols: [],
            check_as_user: 0,
            required_perms: 0,
            in_from_cl: false,
            inh: false,
            lateral: false,
            eref: nil,
            alias: nil,
            enrtuples: 0.0,
            enrname: "",
            colcollations: [],
            coltypmods: [],
            coltypes: [],
            self_reference: false,
            ctelevelsup: 0,
            ctename: "",
            values_lists: [],
            tablefunc: nil,
            funcordinality: false,
            functions: [],
            join_using_alias: nil,
            joinrightcols: [],
            joinleftcols: [],
            joinaliasvars: [],
            joinmergedcols: 0,
            jointype: :JOIN_TYPE_UNDEFINED,
            security_barrier: false,
            subquery: nil,
            tablesample: nil,
            rellockmode: 0,
            relkind: "",
            relid: 0,
            rtekind: :RTEKIND_UNDEFINED,
            __uf__: []

  (
    (
      @spec encode(t()) :: {:ok, iodata(), non_neg_integer()} | {:error, any()}
      def encode(msg) do
        msg |> encode!() |> Tuple.insert_at(0, :ok)
      rescue
        e in [Protox.EncodingError, Protox.RequiredFieldsError] -> {:error, e}
      end

      @spec encode!(t()) :: {iodata(), non_neg_integer()} | no_return()
      def encode!(msg) do
        {_acc = [], _acc_size = 0}
        |> encode_security_quals(msg)
        |> encode_extra_updated_cols(msg)
        |> encode_updated_cols(msg)
        |> encode_inserted_cols(msg)
        |> encode_selected_cols(msg)
        |> encode_check_as_user(msg)
        |> encode_required_perms(msg)
        |> encode_in_from_cl(msg)
        |> encode_inh(msg)
        |> encode_lateral(msg)
        |> encode_eref(msg)
        |> encode_alias(msg)
        |> encode_enrtuples(msg)
        |> encode_enrname(msg)
        |> encode_colcollations(msg)
        |> encode_coltypmods(msg)
        |> encode_coltypes(msg)
        |> encode_self_reference(msg)
        |> encode_ctelevelsup(msg)
        |> encode_ctename(msg)
        |> encode_values_lists(msg)
        |> encode_tablefunc(msg)
        |> encode_funcordinality(msg)
        |> encode_functions(msg)
        |> encode_join_using_alias(msg)
        |> encode_joinrightcols(msg)
        |> encode_joinleftcols(msg)
        |> encode_joinaliasvars(msg)
        |> encode_joinmergedcols(msg)
        |> encode_jointype(msg)
        |> encode_security_barrier(msg)
        |> encode_subquery(msg)
        |> encode_tablesample(msg)
        |> encode_rellockmode(msg)
        |> encode_relkind(msg)
        |> encode_relid(msg)
        |> encode_rtekind(msg)
        |> encode_unknown_fields(msg)
      end
    )

    defp encode_security_quals({acc, acc_size}, msg) do
      case msg.security_quals do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "\xAA\x02" | local_acc], local_acc_size + 2 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:security_quals, "invalid field value"), __STACKTRACE__
    end

    defp encode_extra_updated_cols({acc, acc_size}, msg) do
      case msg.extra_updated_cols do
        [] ->
          {acc, acc_size}

        values ->
          {packed_bytes, packed_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_uint64(value)
                  {[value_bytes | local_acc], local_acc_size + value_bytes_size}
                end)

              {value_size_bytes, value_size_size} = Protox.Varint.encode(value_size)
              {[value_size_bytes, Enum.reverse(value_bytes)], value_size + value_size_size}
            )

          {["\xA2\x02", packed_bytes | acc], acc_size + 2 + packed_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:extra_updated_cols, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_updated_cols({acc, acc_size}, msg) do
      case msg.updated_cols do
        [] ->
          {acc, acc_size}

        values ->
          {packed_bytes, packed_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_uint64(value)
                  {[value_bytes | local_acc], local_acc_size + value_bytes_size}
                end)

              {value_size_bytes, value_size_size} = Protox.Varint.encode(value_size)
              {[value_size_bytes, Enum.reverse(value_bytes)], value_size + value_size_size}
            )

          {["\x9A\x02", packed_bytes | acc], acc_size + 2 + packed_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:updated_cols, "invalid field value"), __STACKTRACE__
    end

    defp encode_inserted_cols({acc, acc_size}, msg) do
      case msg.inserted_cols do
        [] ->
          {acc, acc_size}

        values ->
          {packed_bytes, packed_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_uint64(value)
                  {[value_bytes | local_acc], local_acc_size + value_bytes_size}
                end)

              {value_size_bytes, value_size_size} = Protox.Varint.encode(value_size)
              {[value_size_bytes, Enum.reverse(value_bytes)], value_size + value_size_size}
            )

          {["\x92\x02", packed_bytes | acc], acc_size + 2 + packed_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:inserted_cols, "invalid field value"), __STACKTRACE__
    end

    defp encode_selected_cols({acc, acc_size}, msg) do
      case msg.selected_cols do
        [] ->
          {acc, acc_size}

        values ->
          {packed_bytes, packed_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_uint64(value)
                  {[value_bytes | local_acc], local_acc_size + value_bytes_size}
                end)

              {value_size_bytes, value_size_size} = Protox.Varint.encode(value_size)
              {[value_size_bytes, Enum.reverse(value_bytes)], value_size + value_size_size}
            )

          {["\x8A\x02", packed_bytes | acc], acc_size + 2 + packed_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:selected_cols, "invalid field value"), __STACKTRACE__
    end

    defp encode_check_as_user({acc, acc_size}, msg) do
      if msg.check_as_user == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.check_as_user)
        {["\x80\x02", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:check_as_user, "invalid field value"), __STACKTRACE__
    end

    defp encode_required_perms({acc, acc_size}, msg) do
      if msg.required_perms == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.required_perms)
        {["\xF8\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:required_perms, "invalid field value"), __STACKTRACE__
    end

    defp encode_in_from_cl({acc, acc_size}, msg) do
      if msg.in_from_cl == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.in_from_cl)
        {["\xF0\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:in_from_cl, "invalid field value"), __STACKTRACE__
    end

    defp encode_inh({acc, acc_size}, msg) do
      if msg.inh == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.inh)
        {["\xE8\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:inh, "invalid field value"), __STACKTRACE__
    end

    defp encode_lateral({acc, acc_size}, msg) do
      if msg.lateral == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.lateral)
        {["\xE0\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:lateral, "invalid field value"), __STACKTRACE__
    end

    defp encode_eref({acc, acc_size}, msg) do
      if msg.eref == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.eref)
        {["\xDA\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:eref, "invalid field value"), __STACKTRACE__
    end

    defp encode_alias({acc, acc_size}, msg) do
      if msg.alias == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.alias)
        {["\xD2\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:alias, "invalid field value"), __STACKTRACE__
    end

    defp encode_enrtuples({acc, acc_size}, msg) do
      if msg.enrtuples == 0.0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_double(msg.enrtuples)
        {["\xC9\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:enrtuples, "invalid field value"), __STACKTRACE__
    end

    defp encode_enrname({acc, acc_size}, msg) do
      if msg.enrname == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.enrname)
        {["\xC2\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:enrname, "invalid field value"), __STACKTRACE__
    end

    defp encode_colcollations({acc, acc_size}, msg) do
      case msg.colcollations do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "\xBA\x01" | local_acc], local_acc_size + 2 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:colcollations, "invalid field value"), __STACKTRACE__
    end

    defp encode_coltypmods({acc, acc_size}, msg) do
      case msg.coltypmods do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "\xB2\x01" | local_acc], local_acc_size + 2 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:coltypmods, "invalid field value"), __STACKTRACE__
    end

    defp encode_coltypes({acc, acc_size}, msg) do
      case msg.coltypes do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "\xAA\x01" | local_acc], local_acc_size + 2 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:coltypes, "invalid field value"), __STACKTRACE__
    end

    defp encode_self_reference({acc, acc_size}, msg) do
      if msg.self_reference == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.self_reference)
        {["\xA0\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:self_reference, "invalid field value"), __STACKTRACE__
    end

    defp encode_ctelevelsup({acc, acc_size}, msg) do
      if msg.ctelevelsup == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.ctelevelsup)
        {["\x98\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:ctelevelsup, "invalid field value"), __STACKTRACE__
    end

    defp encode_ctename({acc, acc_size}, msg) do
      if msg.ctename == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.ctename)
        {["\x92\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:ctename, "invalid field value"), __STACKTRACE__
    end

    defp encode_values_lists({acc, acc_size}, msg) do
      case msg.values_lists do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "\x8A\x01" | local_acc], local_acc_size + 2 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:values_lists, "invalid field value"), __STACKTRACE__
    end

    defp encode_tablefunc({acc, acc_size}, msg) do
      if msg.tablefunc == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.tablefunc)
        {["\x82\x01", value_bytes | acc], acc_size + 2 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:tablefunc, "invalid field value"), __STACKTRACE__
    end

    defp encode_funcordinality({acc, acc_size}, msg) do
      if msg.funcordinality == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.funcordinality)
        {["x", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:funcordinality, "invalid field value"), __STACKTRACE__
    end

    defp encode_functions({acc, acc_size}, msg) do
      case msg.functions do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "r" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:functions, "invalid field value"), __STACKTRACE__
    end

    defp encode_join_using_alias({acc, acc_size}, msg) do
      if msg.join_using_alias == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.join_using_alias)
        {["j", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:join_using_alias, "invalid field value"), __STACKTRACE__
    end

    defp encode_joinrightcols({acc, acc_size}, msg) do
      case msg.joinrightcols do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "b" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:joinrightcols, "invalid field value"), __STACKTRACE__
    end

    defp encode_joinleftcols({acc, acc_size}, msg) do
      case msg.joinleftcols do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "Z" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:joinleftcols, "invalid field value"), __STACKTRACE__
    end

    defp encode_joinaliasvars({acc, acc_size}, msg) do
      case msg.joinaliasvars do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "R" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:joinaliasvars, "invalid field value"), __STACKTRACE__
    end

    defp encode_joinmergedcols({acc, acc_size}, msg) do
      if msg.joinmergedcols == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int32(msg.joinmergedcols)
        {["H", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:joinmergedcols, "invalid field value"), __STACKTRACE__
    end

    defp encode_jointype({acc, acc_size}, msg) do
      if msg.jointype == :JOIN_TYPE_UNDEFINED do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} =
          msg.jointype |> PgQuery.JoinType.encode() |> Protox.Encode.encode_enum()

        {["@", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:jointype, "invalid field value"), __STACKTRACE__
    end

    defp encode_security_barrier({acc, acc_size}, msg) do
      if msg.security_barrier == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.security_barrier)
        {["8", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:security_barrier, "invalid field value"), __STACKTRACE__
    end

    defp encode_subquery({acc, acc_size}, msg) do
      if msg.subquery == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.subquery)
        {["2", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:subquery, "invalid field value"), __STACKTRACE__
    end

    defp encode_tablesample({acc, acc_size}, msg) do
      if msg.tablesample == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.tablesample)
        {["*", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:tablesample, "invalid field value"), __STACKTRACE__
    end

    defp encode_rellockmode({acc, acc_size}, msg) do
      if msg.rellockmode == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int32(msg.rellockmode)
        {[" ", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:rellockmode, "invalid field value"), __STACKTRACE__
    end

    defp encode_relkind({acc, acc_size}, msg) do
      if msg.relkind == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.relkind)
        {["\x1A", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:relkind, "invalid field value"), __STACKTRACE__
    end

    defp encode_relid({acc, acc_size}, msg) do
      if msg.relid == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.relid)
        {["\x10", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:relid, "invalid field value"), __STACKTRACE__
    end

    defp encode_rtekind({acc, acc_size}, msg) do
      if msg.rtekind == :RTEKIND_UNDEFINED do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} =
          msg.rtekind |> PgQuery.RTEKind.encode() |> Protox.Encode.encode_enum()

        {["\b", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:rtekind, "invalid field value"), __STACKTRACE__
    end

    defp encode_unknown_fields({acc, acc_size}, msg) do
      Enum.reduce(msg.__uf__, {acc, acc_size}, fn {tag, wire_type, bytes}, {acc, acc_size} ->
        case wire_type do
          0 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :int32)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          1 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :double)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          2 ->
            {len_bytes, len_size} = bytes |> byte_size() |> Protox.Varint.encode()
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :packed)

            {[acc, <<key_bytes::binary, len_bytes::binary, bytes::binary>>],
             acc_size + key_size + len_size + byte_size(bytes)}

          5 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :float)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}
        end
      end)
    end
  )

  (
    (
      @spec decode(binary()) :: {:ok, t()} | {:error, any()}
      def decode(bytes) do
        {:ok, decode!(bytes)}
      rescue
        e in [Protox.DecodingError, Protox.IllegalTagError, Protox.RequiredFieldsError] ->
          {:error, e}
      end

      (
        @spec decode!(binary()) :: t() | no_return()
        def decode!(bytes) do
          parse_key_value(bytes, struct(PgQuery.RangeTblEntry))
        end
      )
    )

    (
      @spec parse_key_value(binary(), struct()) :: struct()
      defp parse_key_value(<<>>, msg) do
        msg
      end

      defp parse_key_value(bytes, msg) do
        {field, rest} =
          case bytes do
            <<_::5, 3::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 3")

            <<_::5, 4::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 4")

            <<_::5, 6::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 6")

            <<_::5, 7::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 7")

            <<0::5, _::3, _rest::binary>> ->
              raise %Protox.IllegalTagError{}

            <<21::5, _wire_type::3, "\x02", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[security_quals: msg.security_quals ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<"\xA2\x02", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 extra_updated_cols:
                   msg.extra_updated_cols ++ Protox.Decode.parse_repeated_uint64([], delimited)
               ], rest}

            <<20::5, _wire_type::3, "\x02", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint64(bytes)
              {[extra_updated_cols: msg.extra_updated_cols ++ [value]], rest}

            <<"\x9A\x02", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 updated_cols:
                   msg.updated_cols ++ Protox.Decode.parse_repeated_uint64([], delimited)
               ], rest}

            <<19::5, _wire_type::3, "\x02", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint64(bytes)
              {[updated_cols: msg.updated_cols ++ [value]], rest}

            <<"\x92\x02", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 inserted_cols:
                   msg.inserted_cols ++ Protox.Decode.parse_repeated_uint64([], delimited)
               ], rest}

            <<18::5, _wire_type::3, "\x02", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint64(bytes)
              {[inserted_cols: msg.inserted_cols ++ [value]], rest}

            <<"\x8A\x02", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 selected_cols:
                   msg.selected_cols ++ Protox.Decode.parse_repeated_uint64([], delimited)
               ], rest}

            <<17::5, _wire_type::3, "\x02", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint64(bytes)
              {[selected_cols: msg.selected_cols ++ [value]], rest}

            <<16::5, _wire_type::3, "\x02", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[check_as_user: value], rest}

            <<31::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[required_perms: value], rest}

            <<30::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[in_from_cl: value], rest}

            <<29::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[inh: value], rest}

            <<28::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[lateral: value], rest}

            <<27::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[eref: Protox.MergeMessage.merge(msg.eref, PgQuery.Alias.decode!(delimited))],
               rest}

            <<26::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[alias: Protox.MergeMessage.merge(msg.alias, PgQuery.Alias.decode!(delimited))],
               rest}

            <<25::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_double(bytes)
              {[enrtuples: value], rest}

            <<24::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[enrname: Protox.Decode.validate_string!(delimited)], rest}

            <<23::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[colcollations: msg.colcollations ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<22::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[coltypmods: msg.coltypmods ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<21::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[coltypes: msg.coltypes ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<20::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[self_reference: value], rest}

            <<19::5, _wire_type::3, "\x01", bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[ctelevelsup: value], rest}

            <<18::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[ctename: Protox.Decode.validate_string!(delimited)], rest}

            <<17::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[values_lists: msg.values_lists ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<16::5, _wire_type::3, "\x01", bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 tablefunc:
                   Protox.MergeMessage.merge(msg.tablefunc, PgQuery.TableFunc.decode!(delimited))
               ], rest}

            <<15::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[funcordinality: value], rest}

            <<14::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[functions: msg.functions ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<13::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 join_using_alias:
                   Protox.MergeMessage.merge(
                     msg.join_using_alias,
                     PgQuery.Alias.decode!(delimited)
                   )
               ], rest}

            <<12::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[joinrightcols: msg.joinrightcols ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<11::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[joinleftcols: msg.joinleftcols ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<10::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[joinaliasvars: msg.joinaliasvars ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<9::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int32(bytes)
              {[joinmergedcols: value], rest}

            <<8::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_enum(bytes, PgQuery.JoinType)
              {[jointype: value], rest}

            <<7::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[security_barrier: value], rest}

            <<6::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 subquery:
                   Protox.MergeMessage.merge(msg.subquery, PgQuery.Query.decode!(delimited))
               ], rest}

            <<5::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 tablesample:
                   Protox.MergeMessage.merge(
                     msg.tablesample,
                     PgQuery.TableSampleClause.decode!(delimited)
                   )
               ], rest}

            <<4::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int32(bytes)
              {[rellockmode: value], rest}

            <<3::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[relkind: Protox.Decode.validate_string!(delimited)], rest}

            <<2::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[relid: value], rest}

            <<1::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_enum(bytes, PgQuery.RTEKind)
              {[rtekind: value], rest}

            <<bytes::binary>> ->
              {tag, wire_type, rest} = Protox.Decode.parse_key(bytes)
              {value, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {[__uf__: msg.__uf__ ++ [value]], rest}
          end

        msg_updated = struct(msg, field)
        parse_key_value(rest, msg_updated)
      end
    )
  )

  (
    @spec unknown_fields(struct()) :: [{non_neg_integer(), Protox.Types.tag(), binary()}]
    def unknown_fields(msg) do
      msg.__uf__
    end

    @spec unknown_fields_name() :: :__uf__
    def unknown_fields_name() do
      :__uf__
    end

    @spec clear_unknown_fields(struct) :: struct
    def clear_unknown_fields(msg) do
      struct!(msg, __uf__: [])
    end
  )

  (
    @spec default(atom()) ::
            {:ok, boolean() | integer() | String.t() | float()}
            | {:error, :no_such_field | :no_default_value}
    def default(:security_quals) do
      {:error, :no_default_value}
    end

    def default(:extra_updated_cols) do
      {:error, :no_default_value}
    end

    def default(:updated_cols) do
      {:error, :no_default_value}
    end

    def default(:inserted_cols) do
      {:error, :no_default_value}
    end

    def default(:selected_cols) do
      {:error, :no_default_value}
    end

    def default(:check_as_user) do
      {:ok, 0}
    end

    def default(:required_perms) do
      {:ok, 0}
    end

    def default(:in_from_cl) do
      {:ok, false}
    end

    def default(:inh) do
      {:ok, false}
    end

    def default(:lateral) do
      {:ok, false}
    end

    def default(:eref) do
      {:ok, nil}
    end

    def default(:alias) do
      {:ok, nil}
    end

    def default(:enrtuples) do
      {:ok, 0.0}
    end

    def default(:enrname) do
      {:ok, ""}
    end

    def default(:colcollations) do
      {:error, :no_default_value}
    end

    def default(:coltypmods) do
      {:error, :no_default_value}
    end

    def default(:coltypes) do
      {:error, :no_default_value}
    end

    def default(:self_reference) do
      {:ok, false}
    end

    def default(:ctelevelsup) do
      {:ok, 0}
    end

    def default(:ctename) do
      {:ok, ""}
    end

    def default(:values_lists) do
      {:error, :no_default_value}
    end

    def default(:tablefunc) do
      {:ok, nil}
    end

    def default(:funcordinality) do
      {:ok, false}
    end

    def default(:functions) do
      {:error, :no_default_value}
    end

    def default(:join_using_alias) do
      {:ok, nil}
    end

    def default(:joinrightcols) do
      {:error, :no_default_value}
    end

    def default(:joinleftcols) do
      {:error, :no_default_value}
    end

    def default(:joinaliasvars) do
      {:error, :no_default_value}
    end

    def default(:joinmergedcols) do
      {:ok, 0}
    end

    def default(:jointype) do
      {:ok, :JOIN_TYPE_UNDEFINED}
    end

    def default(:security_barrier) do
      {:ok, false}
    end

    def default(:subquery) do
      {:ok, nil}
    end

    def default(:tablesample) do
      {:ok, nil}
    end

    def default(:rellockmode) do
      {:ok, 0}
    end

    def default(:relkind) do
      {:ok, ""}
    end

    def default(:relid) do
      {:ok, 0}
    end

    def default(:rtekind) do
      {:ok, :RTEKIND_UNDEFINED}
    end

    def default(_) do
      {:error, :no_such_field}
    end
  )

  @spec schema() :: Protox.MessageSchema.t()
  def schema() do
    %{
      __struct__: Protox.MessageSchema,
      fields: %{
        alias: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :alias,
          tag: 26,
          type: {:message, PgQuery.Alias}
        },
        check_as_user: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :check_as_user,
          tag: 32,
          type: :uint32
        },
        colcollations: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :colcollations,
          tag: 23,
          type: {:message, PgQuery.Node}
        },
        coltypes: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :coltypes,
          tag: 21,
          type: {:message, PgQuery.Node}
        },
        coltypmods: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :coltypmods,
          tag: 22,
          type: {:message, PgQuery.Node}
        },
        ctelevelsup: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :ctelevelsup,
          tag: 19,
          type: :uint32
        },
        ctename: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :ctename,
          tag: 18,
          type: :string
        },
        enrname: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :enrname,
          tag: 24,
          type: :string
        },
        enrtuples: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0.0},
          label: :optional,
          name: :enrtuples,
          tag: 25,
          type: :double
        },
        eref: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :eref,
          tag: 27,
          type: {:message, PgQuery.Alias}
        },
        extra_updated_cols: %{
          __struct__: Protox.Field,
          kind: :packed,
          label: :repeated,
          name: :extra_updated_cols,
          tag: 36,
          type: :uint64
        },
        funcordinality: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :funcordinality,
          tag: 15,
          type: :bool
        },
        functions: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :functions,
          tag: 14,
          type: {:message, PgQuery.Node}
        },
        in_from_cl: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :in_from_cl,
          tag: 30,
          type: :bool
        },
        inh: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :inh,
          tag: 29,
          type: :bool
        },
        inserted_cols: %{
          __struct__: Protox.Field,
          kind: :packed,
          label: :repeated,
          name: :inserted_cols,
          tag: 34,
          type: :uint64
        },
        join_using_alias: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :join_using_alias,
          tag: 13,
          type: {:message, PgQuery.Alias}
        },
        joinaliasvars: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :joinaliasvars,
          tag: 10,
          type: {:message, PgQuery.Node}
        },
        joinleftcols: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :joinleftcols,
          tag: 11,
          type: {:message, PgQuery.Node}
        },
        joinmergedcols: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :joinmergedcols,
          tag: 9,
          type: :int32
        },
        joinrightcols: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :joinrightcols,
          tag: 12,
          type: {:message, PgQuery.Node}
        },
        jointype: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: :JOIN_TYPE_UNDEFINED},
          label: :optional,
          name: :jointype,
          tag: 8,
          type: {:enum, PgQuery.JoinType}
        },
        lateral: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :lateral,
          tag: 28,
          type: :bool
        },
        relid: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :relid,
          tag: 2,
          type: :uint32
        },
        relkind: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :relkind,
          tag: 3,
          type: :string
        },
        rellockmode: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :rellockmode,
          tag: 4,
          type: :int32
        },
        required_perms: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :required_perms,
          tag: 31,
          type: :uint32
        },
        rtekind: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: :RTEKIND_UNDEFINED},
          label: :optional,
          name: :rtekind,
          tag: 1,
          type: {:enum, PgQuery.RTEKind}
        },
        security_barrier: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :security_barrier,
          tag: 7,
          type: :bool
        },
        security_quals: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :security_quals,
          tag: 37,
          type: {:message, PgQuery.Node}
        },
        selected_cols: %{
          __struct__: Protox.Field,
          kind: :packed,
          label: :repeated,
          name: :selected_cols,
          tag: 33,
          type: :uint64
        },
        self_reference: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :self_reference,
          tag: 20,
          type: :bool
        },
        subquery: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :subquery,
          tag: 6,
          type: {:message, PgQuery.Query}
        },
        tablefunc: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :tablefunc,
          tag: 16,
          type: {:message, PgQuery.TableFunc}
        },
        tablesample: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :tablesample,
          tag: 5,
          type: {:message, PgQuery.TableSampleClause}
        },
        updated_cols: %{
          __struct__: Protox.Field,
          kind: :packed,
          label: :repeated,
          name: :updated_cols,
          tag: 35,
          type: :uint64
        },
        values_lists: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :values_lists,
          tag: 17,
          type: {:message, PgQuery.Node}
        }
      },
      file_options: nil,
      name: PgQuery.RangeTblEntry,
      syntax: :proto3
    }
  end
end
