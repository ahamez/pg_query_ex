# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule PgQuery.CreateStmt do
  @moduledoc false
  if function_exported?(Protox, :check_generator_version, 1) do
    Protox.check_generator_version(1)
  else
    raise "This code was generated with protox 2 but the runtime is using an older version of protox."
  end

  @type t :: %__MODULE__{
          if_not_exists: boolean(),
          access_method: String.t(),
          tablespacename: String.t(),
          oncommit: atom(),
          options: [PgQuery.Node.t()],
          constraints: [PgQuery.Node.t()],
          of_typename: PgQuery.TypeName.t() | nil,
          partspec: PgQuery.PartitionSpec.t() | nil,
          partbound: PgQuery.PartitionBoundSpec.t() | nil,
          inh_relations: [PgQuery.Node.t()],
          table_elts: [PgQuery.Node.t()],
          relation: PgQuery.RangeVar.t() | nil,
          __uf__: [{non_neg_integer(), Protox.Types.tag(), binary()}]
        }
  defstruct if_not_exists: false,
            access_method: "",
            tablespacename: "",
            oncommit: :ON_COMMIT_ACTION_UNDEFINED,
            options: [],
            constraints: [],
            of_typename: nil,
            partspec: nil,
            partbound: nil,
            inh_relations: [],
            table_elts: [],
            relation: nil,
            __uf__: []

  (
    (
      @spec encode(t()) :: {:ok, iodata(), non_neg_integer()} | {:error, any()}
      def encode(msg) do
        msg |> encode!() |> Tuple.insert_at(0, :ok)
      rescue
        e in [Protox.EncodingError, Protox.RequiredFieldsError] -> {:error, e}
      end

      @spec encode!(t()) :: {iodata(), non_neg_integer()} | no_return()
      def encode!(msg) do
        {_acc = [], _acc_size = 0}
        |> encode_if_not_exists(msg)
        |> encode_access_method(msg)
        |> encode_tablespacename(msg)
        |> encode_oncommit(msg)
        |> encode_options(msg)
        |> encode_constraints(msg)
        |> encode_of_typename(msg)
        |> encode_partspec(msg)
        |> encode_partbound(msg)
        |> encode_inh_relations(msg)
        |> encode_table_elts(msg)
        |> encode_relation(msg)
        |> encode_unknown_fields(msg)
      end
    )

    defp encode_if_not_exists({acc, acc_size}, msg) do
      if msg.if_not_exists == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.if_not_exists)
        {["`", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:if_not_exists, "invalid field value"), __STACKTRACE__
    end

    defp encode_access_method({acc, acc_size}, msg) do
      if msg.access_method == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.access_method)
        {["Z", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:access_method, "invalid field value"), __STACKTRACE__
    end

    defp encode_tablespacename({acc, acc_size}, msg) do
      if msg.tablespacename == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.tablespacename)
        {["R", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:tablespacename, "invalid field value"), __STACKTRACE__
    end

    defp encode_oncommit({acc, acc_size}, msg) do
      if msg.oncommit == :ON_COMMIT_ACTION_UNDEFINED do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} =
          msg.oncommit |> PgQuery.OnCommitAction.encode() |> Protox.Encode.encode_enum()

        {["H", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:oncommit, "invalid field value"), __STACKTRACE__
    end

    defp encode_options({acc, acc_size}, msg) do
      case msg.options do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "B" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:options, "invalid field value"), __STACKTRACE__
    end

    defp encode_constraints({acc, acc_size}, msg) do
      case msg.constraints do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, ":" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:constraints, "invalid field value"), __STACKTRACE__
    end

    defp encode_of_typename({acc, acc_size}, msg) do
      if msg.of_typename == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.of_typename)
        {["2", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:of_typename, "invalid field value"), __STACKTRACE__
    end

    defp encode_partspec({acc, acc_size}, msg) do
      if msg.partspec == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.partspec)
        {["*", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:partspec, "invalid field value"), __STACKTRACE__
    end

    defp encode_partbound({acc, acc_size}, msg) do
      if msg.partbound == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.partbound)
        {["\"", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:partbound, "invalid field value"), __STACKTRACE__
    end

    defp encode_inh_relations({acc, acc_size}, msg) do
      case msg.inh_relations do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "\x1A" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:inh_relations, "invalid field value"), __STACKTRACE__
    end

    defp encode_table_elts({acc, acc_size}, msg) do
      case msg.table_elts do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "\x12" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:table_elts, "invalid field value"), __STACKTRACE__
    end

    defp encode_relation({acc, acc_size}, msg) do
      if msg.relation == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.relation)
        {["\n", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:relation, "invalid field value"), __STACKTRACE__
    end

    defp encode_unknown_fields({acc, acc_size}, msg) do
      Enum.reduce(msg.__uf__, {acc, acc_size}, fn {tag, wire_type, bytes}, {acc, acc_size} ->
        case wire_type do
          0 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :int32)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          1 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :double)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          2 ->
            {len_bytes, len_size} = bytes |> byte_size() |> Protox.Varint.encode()
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :packed)

            {[acc, <<key_bytes::binary, len_bytes::binary, bytes::binary>>],
             acc_size + key_size + len_size + byte_size(bytes)}

          5 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :float)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}
        end
      end)
    end
  )

  (
    (
      @spec decode(binary()) :: {:ok, t()} | {:error, any()}
      def decode(bytes) do
        {:ok, decode!(bytes)}
      rescue
        e in [Protox.DecodingError, Protox.IllegalTagError, Protox.RequiredFieldsError] ->
          {:error, e}
      end

      (
        @spec decode!(binary()) :: t() | no_return()
        def decode!(bytes) do
          parse_key_value(bytes, struct(PgQuery.CreateStmt))
        end
      )
    )

    (
      @spec parse_key_value(binary(), struct()) :: struct()
      defp parse_key_value(<<>>, msg) do
        msg
      end

      defp parse_key_value(bytes, msg) do
        {field, rest} =
          case bytes do
            <<_::5, 3::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 3")

            <<_::5, 4::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 4")

            <<_::5, 6::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 6")

            <<_::5, 7::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 7")

            <<0::5, _::3, _rest::binary>> ->
              raise %Protox.IllegalTagError{}

            <<12::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[if_not_exists: value], rest}

            <<11::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[access_method: Protox.Decode.validate_string!(delimited)], rest}

            <<10::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[tablespacename: Protox.Decode.validate_string!(delimited)], rest}

            <<9::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_enum(bytes, PgQuery.OnCommitAction)
              {[oncommit: value], rest}

            <<8::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[options: msg.options ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<7::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[constraints: msg.constraints ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<6::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 of_typename:
                   Protox.MergeMessage.merge(msg.of_typename, PgQuery.TypeName.decode!(delimited))
               ], rest}

            <<5::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 partspec:
                   Protox.MergeMessage.merge(
                     msg.partspec,
                     PgQuery.PartitionSpec.decode!(delimited)
                   )
               ], rest}

            <<4::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 partbound:
                   Protox.MergeMessage.merge(
                     msg.partbound,
                     PgQuery.PartitionBoundSpec.decode!(delimited)
                   )
               ], rest}

            <<3::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[inh_relations: msg.inh_relations ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<2::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[table_elts: msg.table_elts ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<1::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 relation:
                   Protox.MergeMessage.merge(msg.relation, PgQuery.RangeVar.decode!(delimited))
               ], rest}

            <<bytes::binary>> ->
              {tag, wire_type, rest} = Protox.Decode.parse_key(bytes)
              {value, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {[__uf__: msg.__uf__ ++ [value]], rest}
          end

        msg_updated = struct(msg, field)
        parse_key_value(rest, msg_updated)
      end
    )
  )

  (
    @spec unknown_fields(struct()) :: [{non_neg_integer(), Protox.Types.tag(), binary()}]
    def unknown_fields(msg) do
      msg.__uf__
    end

    @spec unknown_fields_name() :: :__uf__
    def unknown_fields_name() do
      :__uf__
    end

    @spec clear_unknown_fields(struct) :: struct
    def clear_unknown_fields(msg) do
      struct!(msg, __uf__: [])
    end
  )

  (
    @spec default(atom()) ::
            {:ok, boolean() | integer() | String.t() | float()}
            | {:error, :no_such_field | :no_default_value}
    def default(:if_not_exists) do
      {:ok, false}
    end

    def default(:access_method) do
      {:ok, ""}
    end

    def default(:tablespacename) do
      {:ok, ""}
    end

    def default(:oncommit) do
      {:ok, :ON_COMMIT_ACTION_UNDEFINED}
    end

    def default(:options) do
      {:error, :no_default_value}
    end

    def default(:constraints) do
      {:error, :no_default_value}
    end

    def default(:of_typename) do
      {:ok, nil}
    end

    def default(:partspec) do
      {:ok, nil}
    end

    def default(:partbound) do
      {:ok, nil}
    end

    def default(:inh_relations) do
      {:error, :no_default_value}
    end

    def default(:table_elts) do
      {:error, :no_default_value}
    end

    def default(:relation) do
      {:ok, nil}
    end

    def default(_) do
      {:error, :no_such_field}
    end
  )

  @spec schema() :: Protox.MessageSchema.t()
  def schema() do
    %{
      __struct__: Protox.MessageSchema,
      fields: %{
        access_method: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :access_method,
          tag: 11,
          type: :string
        },
        constraints: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :constraints,
          tag: 7,
          type: {:message, PgQuery.Node}
        },
        if_not_exists: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :if_not_exists,
          tag: 12,
          type: :bool
        },
        inh_relations: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :inh_relations,
          tag: 3,
          type: {:message, PgQuery.Node}
        },
        of_typename: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :of_typename,
          tag: 6,
          type: {:message, PgQuery.TypeName}
        },
        oncommit: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: :ON_COMMIT_ACTION_UNDEFINED},
          label: :optional,
          name: :oncommit,
          tag: 9,
          type: {:enum, PgQuery.OnCommitAction}
        },
        options: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :options,
          tag: 8,
          type: {:message, PgQuery.Node}
        },
        partbound: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :partbound,
          tag: 4,
          type: {:message, PgQuery.PartitionBoundSpec}
        },
        partspec: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :partspec,
          tag: 5,
          type: {:message, PgQuery.PartitionSpec}
        },
        relation: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :relation,
          tag: 1,
          type: {:message, PgQuery.RangeVar}
        },
        table_elts: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :table_elts,
          tag: 2,
          type: {:message, PgQuery.Node}
        },
        tablespacename: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :tablespacename,
          tag: 10,
          type: :string
        }
      },
      file_options: nil,
      name: PgQuery.CreateStmt,
      syntax: :proto3
    }
  end
end
