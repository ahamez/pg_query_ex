# Code generated by protox. Don't edit.
# credo:disable-for-this-file
defmodule PgQuery.WindowClause do
  @moduledoc false
  if function_exported?(Protox, :check_generator_version, 1) do
    Protox.check_generator_version(1)
  else
    raise "This code was generated with protox 2 but the runtime is using an older version of protox."
  end

  @type t :: %__MODULE__{
          copied_order: boolean(),
          winref: non_neg_integer(),
          in_range_nulls_first: boolean(),
          in_range_asc: boolean(),
          in_range_coll: non_neg_integer(),
          end_in_range_func: non_neg_integer(),
          start_in_range_func: non_neg_integer(),
          run_condition: [PgQuery.Node.t()],
          end_offset: PgQuery.Node.t() | nil,
          start_offset: PgQuery.Node.t() | nil,
          frame_options: integer(),
          order_clause: [PgQuery.Node.t()],
          partition_clause: [PgQuery.Node.t()],
          refname: String.t(),
          name: String.t(),
          __uf__: [{non_neg_integer(), Protox.Types.tag(), binary()}]
        }
  defstruct copied_order: false,
            winref: 0,
            in_range_nulls_first: false,
            in_range_asc: false,
            in_range_coll: 0,
            end_in_range_func: 0,
            start_in_range_func: 0,
            run_condition: [],
            end_offset: nil,
            start_offset: nil,
            frame_options: 0,
            order_clause: [],
            partition_clause: [],
            refname: "",
            name: "",
            __uf__: []

  (
    (
      @spec encode(t()) :: {:ok, iodata(), non_neg_integer()} | {:error, any()}
      def encode(msg) do
        msg |> encode!() |> Tuple.insert_at(0, :ok)
      rescue
        e in [Protox.EncodingError, Protox.RequiredFieldsError] -> {:error, e}
      end

      @spec encode!(t()) :: {iodata(), non_neg_integer()} | no_return()
      def encode!(msg) do
        {_acc = [], _acc_size = 0}
        |> encode_copied_order(msg)
        |> encode_winref(msg)
        |> encode_in_range_nulls_first(msg)
        |> encode_in_range_asc(msg)
        |> encode_in_range_coll(msg)
        |> encode_end_in_range_func(msg)
        |> encode_start_in_range_func(msg)
        |> encode_run_condition(msg)
        |> encode_end_offset(msg)
        |> encode_start_offset(msg)
        |> encode_frame_options(msg)
        |> encode_order_clause(msg)
        |> encode_partition_clause(msg)
        |> encode_refname(msg)
        |> encode_name(msg)
        |> encode_unknown_fields(msg)
      end
    )

    defp encode_copied_order({acc, acc_size}, msg) do
      if msg.copied_order == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.copied_order)
        {["x", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:copied_order, "invalid field value"), __STACKTRACE__
    end

    defp encode_winref({acc, acc_size}, msg) do
      if msg.winref == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.winref)
        {["p", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:winref, "invalid field value"), __STACKTRACE__
    end

    defp encode_in_range_nulls_first({acc, acc_size}, msg) do
      if msg.in_range_nulls_first == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.in_range_nulls_first)
        {["h", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:in_range_nulls_first, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_in_range_asc({acc, acc_size}, msg) do
      if msg.in_range_asc == false do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_bool(msg.in_range_asc)
        {["`", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:in_range_asc, "invalid field value"), __STACKTRACE__
    end

    defp encode_in_range_coll({acc, acc_size}, msg) do
      if msg.in_range_coll == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.in_range_coll)
        {["X", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:in_range_coll, "invalid field value"), __STACKTRACE__
    end

    defp encode_end_in_range_func({acc, acc_size}, msg) do
      if msg.end_in_range_func == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.end_in_range_func)
        {["P", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:end_in_range_func, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_start_in_range_func({acc, acc_size}, msg) do
      if msg.start_in_range_func == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_uint32(msg.start_in_range_func)
        {["H", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:start_in_range_func, "invalid field value"),
                __STACKTRACE__
    end

    defp encode_run_condition({acc, acc_size}, msg) do
      case msg.run_condition do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "B" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:run_condition, "invalid field value"), __STACKTRACE__
    end

    defp encode_end_offset({acc, acc_size}, msg) do
      if msg.end_offset == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.end_offset)
        {[":", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:end_offset, "invalid field value"), __STACKTRACE__
    end

    defp encode_start_offset({acc, acc_size}, msg) do
      if msg.start_offset == nil do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_message(msg.start_offset)
        {["2", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:start_offset, "invalid field value"), __STACKTRACE__
    end

    defp encode_frame_options({acc, acc_size}, msg) do
      if msg.frame_options == 0 do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_int32(msg.frame_options)
        {["(", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:frame_options, "invalid field value"), __STACKTRACE__
    end

    defp encode_order_clause({acc, acc_size}, msg) do
      case msg.order_clause do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "\"" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:order_clause, "invalid field value"), __STACKTRACE__
    end

    defp encode_partition_clause({acc, acc_size}, msg) do
      case msg.partition_clause do
        [] ->
          {acc, acc_size}

        values ->
          {value_bytes, value_size} =
            (
              {value_bytes, value_size} =
                Enum.reduce(values, {_local_acc = [], _local_acc_size = 0}, fn value,
                                                                               {local_acc,
                                                                                local_acc_size} ->
                  {value_bytes, value_bytes_size} = Protox.Encode.encode_message(value)
                  {[value_bytes, "\x1A" | local_acc], local_acc_size + 1 + value_bytes_size}
                end)

              {Enum.reverse(value_bytes), value_size}
            )

          {[value_bytes | acc], acc_size + value_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:partition_clause, "invalid field value"), __STACKTRACE__
    end

    defp encode_refname({acc, acc_size}, msg) do
      if msg.refname == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.refname)
        {["\x12", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:refname, "invalid field value"), __STACKTRACE__
    end

    defp encode_name({acc, acc_size}, msg) do
      if msg.name == "" do
        {acc, acc_size}
      else
        {value_bytes, value_bytes_size} = Protox.Encode.encode_string(msg.name)
        {["\n", value_bytes | acc], acc_size + 1 + value_bytes_size}
      end
    rescue
      ArgumentError ->
        reraise Protox.EncodingError.new(:name, "invalid field value"), __STACKTRACE__
    end

    defp encode_unknown_fields({acc, acc_size}, msg) do
      Enum.reduce(msg.__uf__, {acc, acc_size}, fn {tag, wire_type, bytes}, {acc, acc_size} ->
        case wire_type do
          0 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :int32)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          1 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :double)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}

          2 ->
            {len_bytes, len_size} = bytes |> byte_size() |> Protox.Varint.encode()
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :packed)

            {[acc, <<key_bytes::binary, len_bytes::binary, bytes::binary>>],
             acc_size + key_size + len_size + byte_size(bytes)}

          5 ->
            {key_bytes, key_size} = Protox.Encode.make_key_bytes(tag, :float)
            {[acc, <<key_bytes::binary, bytes::binary>>], acc_size + key_size + byte_size(bytes)}
        end
      end)
    end
  )

  (
    (
      @spec decode(binary()) :: {:ok, t()} | {:error, any()}
      def decode(bytes) do
        {:ok, decode!(bytes)}
      rescue
        e in [Protox.DecodingError, Protox.IllegalTagError, Protox.RequiredFieldsError] ->
          {:error, e}
      end

      (
        @spec decode!(binary()) :: t() | no_return()
        def decode!(bytes) do
          parse_key_value(bytes, struct(PgQuery.WindowClause))
        end
      )
    )

    (
      @spec parse_key_value(binary(), struct()) :: struct()
      defp parse_key_value(<<>>, msg) do
        msg
      end

      defp parse_key_value(bytes, msg) do
        {field, rest} =
          case bytes do
            <<_::5, 3::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 3")

            <<_::5, 4::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 4")

            <<_::5, 6::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 6")

            <<_::5, 7::3, _rest::binary>> ->
              raise Protox.DecodingError.new(bytes, "invalid wire type 7")

            <<0::5, _::3, _rest::binary>> ->
              raise %Protox.IllegalTagError{}

            <<15::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[copied_order: value], rest}

            <<14::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[winref: value], rest}

            <<13::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[in_range_nulls_first: value], rest}

            <<12::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_bool(bytes)
              {[in_range_asc: value], rest}

            <<11::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[in_range_coll: value], rest}

            <<10::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[end_in_range_func: value], rest}

            <<9::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_uint32(bytes)
              {[start_in_range_func: value], rest}

            <<8::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[run_condition: msg.run_condition ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<7::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 end_offset:
                   Protox.MergeMessage.merge(msg.end_offset, PgQuery.Node.decode!(delimited))
               ], rest}

            <<6::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[
                 start_offset:
                   Protox.MergeMessage.merge(msg.start_offset, PgQuery.Node.decode!(delimited))
               ], rest}

            <<5::5, _wire_type::3, bytes::binary>> ->
              {value, rest} = Protox.Decode.parse_int32(bytes)
              {[frame_options: value], rest}

            <<4::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[order_clause: msg.order_clause ++ [PgQuery.Node.decode!(delimited)]], rest}

            <<3::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)

              {[partition_clause: msg.partition_clause ++ [PgQuery.Node.decode!(delimited)]],
               rest}

            <<2::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[refname: Protox.Decode.validate_string!(delimited)], rest}

            <<1::5, _wire_type::3, bytes::binary>> ->
              {len, bytes} = Protox.Varint.decode(bytes)
              {delimited, rest} = Protox.Decode.parse_delimited(bytes, len)
              {[name: Protox.Decode.validate_string!(delimited)], rest}

            <<bytes::binary>> ->
              {tag, wire_type, rest} = Protox.Decode.parse_key(bytes)
              {value, rest} = Protox.Decode.parse_unknown(tag, wire_type, rest)
              {[__uf__: msg.__uf__ ++ [value]], rest}
          end

        msg_updated = struct(msg, field)
        parse_key_value(rest, msg_updated)
      end
    )
  )

  (
    @spec unknown_fields(struct()) :: [{non_neg_integer(), Protox.Types.tag(), binary()}]
    def unknown_fields(msg) do
      msg.__uf__
    end

    @spec unknown_fields_name() :: :__uf__
    def unknown_fields_name() do
      :__uf__
    end

    @spec clear_unknown_fields(struct) :: struct
    def clear_unknown_fields(msg) do
      struct!(msg, __uf__: [])
    end
  )

  (
    @spec default(atom()) ::
            {:ok, boolean() | integer() | String.t() | float()}
            | {:error, :no_such_field | :no_default_value}
    def default(:copied_order) do
      {:ok, false}
    end

    def default(:winref) do
      {:ok, 0}
    end

    def default(:in_range_nulls_first) do
      {:ok, false}
    end

    def default(:in_range_asc) do
      {:ok, false}
    end

    def default(:in_range_coll) do
      {:ok, 0}
    end

    def default(:end_in_range_func) do
      {:ok, 0}
    end

    def default(:start_in_range_func) do
      {:ok, 0}
    end

    def default(:run_condition) do
      {:error, :no_default_value}
    end

    def default(:end_offset) do
      {:ok, nil}
    end

    def default(:start_offset) do
      {:ok, nil}
    end

    def default(:frame_options) do
      {:ok, 0}
    end

    def default(:order_clause) do
      {:error, :no_default_value}
    end

    def default(:partition_clause) do
      {:error, :no_default_value}
    end

    def default(:refname) do
      {:ok, ""}
    end

    def default(:name) do
      {:ok, ""}
    end

    def default(_) do
      {:error, :no_such_field}
    end
  )

  @spec schema() :: Protox.MessageSchema.t()
  def schema() do
    %{
      __struct__: Protox.MessageSchema,
      fields: %{
        copied_order: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :copied_order,
          tag: 15,
          type: :bool
        },
        end_in_range_func: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :end_in_range_func,
          tag: 10,
          type: :uint32
        },
        end_offset: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :end_offset,
          tag: 7,
          type: {:message, PgQuery.Node}
        },
        frame_options: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :frame_options,
          tag: 5,
          type: :int32
        },
        in_range_asc: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :in_range_asc,
          tag: 12,
          type: :bool
        },
        in_range_coll: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :in_range_coll,
          tag: 11,
          type: :uint32
        },
        in_range_nulls_first: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: false},
          label: :optional,
          name: :in_range_nulls_first,
          tag: 13,
          type: :bool
        },
        name: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :name,
          tag: 1,
          type: :string
        },
        order_clause: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :order_clause,
          tag: 4,
          type: {:message, PgQuery.Node}
        },
        partition_clause: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :partition_clause,
          tag: 3,
          type: {:message, PgQuery.Node}
        },
        refname: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: ""},
          label: :optional,
          name: :refname,
          tag: 2,
          type: :string
        },
        run_condition: %{
          __struct__: Protox.Field,
          kind: :unpacked,
          label: :repeated,
          name: :run_condition,
          tag: 8,
          type: {:message, PgQuery.Node}
        },
        start_in_range_func: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :start_in_range_func,
          tag: 9,
          type: :uint32
        },
        start_offset: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: nil},
          label: :optional,
          name: :start_offset,
          tag: 6,
          type: {:message, PgQuery.Node}
        },
        winref: %{
          __struct__: Protox.Field,
          kind: %{__struct__: Protox.Scalar, default_value: 0},
          label: :optional,
          name: :winref,
          tag: 14,
          type: :uint32
        }
      },
      file_options: nil,
      name: PgQuery.WindowClause,
      syntax: :proto3
    }
  end
end
